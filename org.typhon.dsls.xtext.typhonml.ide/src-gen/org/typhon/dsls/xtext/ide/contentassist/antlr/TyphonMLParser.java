/*
 * generated by Xtext 2.14.0
 */
package org.typhon.dsls.xtext.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.typhon.dsls.xtext.ide.contentassist.antlr.internal.InternalTyphonMLParser;
import org.typhon.dsls.xtext.services.TyphonMLGrammarAccess;

public class TyphonMLParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(TyphonMLGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, TyphonMLGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getDatabaseAccess().getAlternatives(), "rule__Database__Alternatives");
			builder.put(grammarAccess.getDataTypeAccess().getAlternatives(), "rule__DataType__Alternatives");
			builder.put(grammarAccess.getEStringAccess().getAlternatives(), "rule__EString__Alternatives");
			builder.put(grammarAccess.getEBooleanObjectAccess().getAlternatives(), "rule__EBooleanObject__Alternatives");
			builder.put(grammarAccess.getCardinalityAccess().getAlternatives(), "rule__Cardinality__Alternatives");
			builder.put(grammarAccess.getModelAccess().getGroup(), "rule__Model__Group__0");
			builder.put(grammarAccess.getKeyValueDBAccess().getGroup(), "rule__KeyValueDB__Group__0");
			builder.put(grammarAccess.getKeyValueElementAccess().getGroup(), "rule__KeyValueElement__Group__0");
			builder.put(grammarAccess.getDocumentDBAccess().getGroup(), "rule__DocumentDB__Group__0");
			builder.put(grammarAccess.getDocumentDBCollectionAccess().getGroup(), "rule__DocumentDBCollection__Group__0");
			builder.put(grammarAccess.getRelationalDBAccess().getGroup(), "rule__RelationalDB__Group__0");
			builder.put(grammarAccess.getTableAccess().getGroup(), "rule__Table__Group__0");
			builder.put(grammarAccess.getIndexSpecAccess().getGroup(), "rule__IndexSpec__Group__0");
			builder.put(grammarAccess.getIdSpecAccess().getGroup(), "rule__IdSpec__Group__0");
			builder.put(grammarAccess.getGraphDBAccess().getGroup(), "rule__GraphDB__Group__0");
			builder.put(grammarAccess.getNodeAccess().getGroup(), "rule__Node__Group__0");
			builder.put(grammarAccess.getGraphAttributeAccess().getGroup(), "rule__GraphAttribute__Group__0");
			builder.put(grammarAccess.getEdgeAccess().getGroup(), "rule__Edge__Group__0");
			builder.put(grammarAccess.getGraphEdgeLabelAccess().getGroup(), "rule__GraphEdgeLabel__Group__0");
			builder.put(grammarAccess.getPrimitiveDataTypeAccess().getGroup(), "rule__PrimitiveDataType__Group__0");
			builder.put(grammarAccess.getCustomDataTypeAccess().getGroup(), "rule__CustomDataType__Group__0");
			builder.put(grammarAccess.getEntityAccess().getGroup(), "rule__Entity__Group__0");
			builder.put(grammarAccess.getAttributeAccess().getGroup(), "rule__Attribute__Group__0");
			builder.put(grammarAccess.getDataTypeItemAccess().getGroup(), "rule__DataTypeItem__Group__0");
			builder.put(grammarAccess.getRelationAccess().getGroup(), "rule__Relation__Group__0");
			builder.put(grammarAccess.getRelationAccess().getGroup_5(), "rule__Relation__Group_5__0");
			builder.put(grammarAccess.getRelationAccess().getGroup_6(), "rule__Relation__Group_6__0");
			builder.put(grammarAccess.getModelAccess().getDataTypesAssignment_1(), "rule__Model__DataTypesAssignment_1");
			builder.put(grammarAccess.getModelAccess().getDatabasesAssignment_2(), "rule__Model__DatabasesAssignment_2");
			builder.put(grammarAccess.getKeyValueDBAccess().getNameAssignment_2(), "rule__KeyValueDB__NameAssignment_2");
			builder.put(grammarAccess.getKeyValueDBAccess().getElementsAssignment_4(), "rule__KeyValueDB__ElementsAssignment_4");
			builder.put(grammarAccess.getKeyValueElementAccess().getKeyAssignment_1(), "rule__KeyValueElement__KeyAssignment_1");
			builder.put(grammarAccess.getKeyValueElementAccess().getEntityAssignment_3(), "rule__KeyValueElement__EntityAssignment_3");
			builder.put(grammarAccess.getKeyValueElementAccess().getValuesAssignment_5(), "rule__KeyValueElement__ValuesAssignment_5");
			builder.put(grammarAccess.getDocumentDBAccess().getNameAssignment_2(), "rule__DocumentDB__NameAssignment_2");
			builder.put(grammarAccess.getDocumentDBAccess().getCollectionsAssignment_4(), "rule__DocumentDB__CollectionsAssignment_4");
			builder.put(grammarAccess.getDocumentDBCollectionAccess().getNameAssignment_1(), "rule__DocumentDBCollection__NameAssignment_1");
			builder.put(grammarAccess.getDocumentDBCollectionAccess().getEntityAssignment_3(), "rule__DocumentDBCollection__EntityAssignment_3");
			builder.put(grammarAccess.getRelationalDBAccess().getNameAssignment_2(), "rule__RelationalDB__NameAssignment_2");
			builder.put(grammarAccess.getRelationalDBAccess().getTablesAssignment_4(), "rule__RelationalDB__TablesAssignment_4");
			builder.put(grammarAccess.getTableAccess().getNameAssignment_3(), "rule__Table__NameAssignment_3");
			builder.put(grammarAccess.getTableAccess().getEntityAssignment_5(), "rule__Table__EntityAssignment_5");
			builder.put(grammarAccess.getTableAccess().getIndexSpecAssignment_6(), "rule__Table__IndexSpecAssignment_6");
			builder.put(grammarAccess.getTableAccess().getIdSpecAssignment_7(), "rule__Table__IdSpecAssignment_7");
			builder.put(grammarAccess.getIndexSpecAccess().getNameAssignment_2(), "rule__IndexSpec__NameAssignment_2");
			builder.put(grammarAccess.getIndexSpecAccess().getAttributesAssignment_4(), "rule__IndexSpec__AttributesAssignment_4");
			builder.put(grammarAccess.getIdSpecAccess().getAttributesAssignment_3(), "rule__IdSpec__AttributesAssignment_3");
			builder.put(grammarAccess.getGraphDBAccess().getNameAssignment_2(), "rule__GraphDB__NameAssignment_2");
			builder.put(grammarAccess.getGraphDBAccess().getNodesAssignment_4(), "rule__GraphDB__NodesAssignment_4");
			builder.put(grammarAccess.getGraphDBAccess().getEdgesAssignment_5(), "rule__GraphDB__EdgesAssignment_5");
			builder.put(grammarAccess.getNodeAccess().getNameAssignment_2(), "rule__Node__NameAssignment_2");
			builder.put(grammarAccess.getNodeAccess().getEntityAssignment_4(), "rule__Node__EntityAssignment_4");
			builder.put(grammarAccess.getNodeAccess().getAttributesAssignment_6(), "rule__Node__AttributesAssignment_6");
			builder.put(grammarAccess.getGraphAttributeAccess().getNameAssignment_1(), "rule__GraphAttribute__NameAssignment_1");
			builder.put(grammarAccess.getGraphAttributeAccess().getValueAssignment_3(), "rule__GraphAttribute__ValueAssignment_3");
			builder.put(grammarAccess.getEdgeAccess().getNameAssignment_2(), "rule__Edge__NameAssignment_2");
			builder.put(grammarAccess.getEdgeAccess().getFromAssignment_5(), "rule__Edge__FromAssignment_5");
			builder.put(grammarAccess.getEdgeAccess().getToAssignment_7(), "rule__Edge__ToAssignment_7");
			builder.put(grammarAccess.getEdgeAccess().getLabelsAssignment_10(), "rule__Edge__LabelsAssignment_10");
			builder.put(grammarAccess.getGraphEdgeLabelAccess().getNameAssignment_1(), "rule__GraphEdgeLabel__NameAssignment_1");
			builder.put(grammarAccess.getGraphEdgeLabelAccess().getTypeAssignment_3(), "rule__GraphEdgeLabel__TypeAssignment_3");
			builder.put(grammarAccess.getPrimitiveDataTypeAccess().getNameAssignment_2(), "rule__PrimitiveDataType__NameAssignment_2");
			builder.put(grammarAccess.getCustomDataTypeAccess().getNameAssignment_2(), "rule__CustomDataType__NameAssignment_2");
			builder.put(grammarAccess.getCustomDataTypeAccess().getElementsAssignment_4(), "rule__CustomDataType__ElementsAssignment_4");
			builder.put(grammarAccess.getEntityAccess().getNameAssignment_1(), "rule__Entity__NameAssignment_1");
			builder.put(grammarAccess.getEntityAccess().getAttributesAssignment_3(), "rule__Entity__AttributesAssignment_3");
			builder.put(grammarAccess.getEntityAccess().getRelationsAssignment_4(), "rule__Entity__RelationsAssignment_4");
			builder.put(grammarAccess.getAttributeAccess().getNameAssignment_0(), "rule__Attribute__NameAssignment_0");
			builder.put(grammarAccess.getAttributeAccess().getTypeAssignment_2(), "rule__Attribute__TypeAssignment_2");
			builder.put(grammarAccess.getDataTypeItemAccess().getNameAssignment_1(), "rule__DataTypeItem__NameAssignment_1");
			builder.put(grammarAccess.getDataTypeItemAccess().getTypeAssignment_3(), "rule__DataTypeItem__TypeAssignment_3");
			builder.put(grammarAccess.getRelationAccess().getNameAssignment_1(), "rule__Relation__NameAssignment_1");
			builder.put(grammarAccess.getRelationAccess().getIsContainmentAssignment_2(), "rule__Relation__IsContainmentAssignment_2");
			builder.put(grammarAccess.getRelationAccess().getTypeAssignment_4(), "rule__Relation__TypeAssignment_4");
			builder.put(grammarAccess.getRelationAccess().getOppositeAssignment_5_1(), "rule__Relation__OppositeAssignment_5_1");
			builder.put(grammarAccess.getRelationAccess().getCardinalityAssignment_6_1(), "rule__Relation__CardinalityAssignment_6_1");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private TyphonMLGrammarAccess grammarAccess;

	@Override
	protected InternalTyphonMLParser createParser() {
		InternalTyphonMLParser result = new InternalTyphonMLParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public TyphonMLGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(TyphonMLGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
