grammar it.univaq.disim.typhon.TyphonML with org.eclipse.xtext.common.Terminals

//import "http://org.typhon.dsls.typhonml.sirius" 
import "platform:/resource/it.univaq.disim.typhonml/model/typhonml.ecore"
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

Model returns Model:
	{Model}
		(dataTypes+=DataType)*
		(databases+=Database)*
		;  
		
Database returns Database: 
		RelationalDB | GraphDB | DocumentDB | KeyValueDB
;

KeyValueDB returns KeyValueDB:
	{KeyValueDB}
	'keyvaluedb' name=ID '{'
		(elements+=KeyValueElement)*
	'}'
;

KeyValueElement returns KeyValueElement:
	{KeyValueElement}
	key=ID '->' entity=[Entity] '{'
		(values+=[DataType|EString])?	
	'}'
;

DocumentDB returns DocumentDB:
	{DocumentDB}
	'documentdb' name=ID '{'
		(collections+=DocumentDBCollection)*
	'}'	
;

DocumentDBCollection returns Collection:
	{Collection}
	name=ID ':' entity=[Entity]
;

RelationalDB returns RelationalDB:
	{RelationalDB}
	'relationaldb' name=ID '{'
		(tables+=Table)*
	'}';


Table returns Table:
	{Table}
	'table' '{' 
		name=ID ':' entity=[Entity]
		(indexSpec=IndexSpec)?
		(idSpec=IdSpec)?		
	'}'  
;

IndexSpec returns IndexSpec:
	{IndexSpec}
	'index' name=ID '{' 	 
		 (attributes+=[Attribute|STRING])*
		// (references+=[Attribute|STRING])*
	 '}'
;

IdSpec returns IdSpec:
	{IdSpec}
	'id' '{' 
		(attributes+=[Attribute|STRING])* 
	'}'
;

GraphDB returns GraphDB:
	{GraphDB}
	'graphdb' name=ID '{'
		(nodes+=Node)*
		(edges+=Edge)*
	'}'
;

Node returns GraphNode:
	{GraphNode}
	'node' name=ID ':' entity=[Entity] '{'
		(attributes+=GraphAttribute)*
	'}'	
;

GraphAttribute returns GraphAttribute:
	{GraphAttribute}
	name=EString '=' value=[Attribute|STRING]
;

Edge returns GraphEdge:
	{GraphEdge}
	'edge' name=ID '{'
		'from' from=[GraphNode]
		'to' to=[GraphNode]
		'label' '{'
			(labels+=GraphEdgeLabel)*
		'}'
	'}'
;

GraphEdgeLabel returns GraphEdgeLabel:
	{GraphEdgeLabel}
	name=EString ':' (type=[DataType|EString])?
;
		
		
DataType returns DataType:
	PrimitiveDataType | CustomDataType | Entity;


EString returns ecore::EString:
	STRING | ID;

PrimitiveDataType returns PrimitiveDataType:
	{PrimitiveDataType}
	'datatype'
	name=EString;

CustomDataType returns CustomDataType:
	{CustomDataType}
	'custom-datatype'
	name=EString
	'{'
		(elements+=DataTypeItem)*
	'}';

Entity returns Entity:
	'entity'
	name=EString
	'{'
		 (attributes+=Attribute)*
		 (relations+=Relation)*
	'}';


Attribute returns Attribute:
	name=EString ':' (type=[DataType|EString])?
;

DataTypeItem returns DataTypeItem:
	{DataTypeItem}
	name=EString ':' type=[DataType|EString];

Relation returns Relation:
	{Relation}
	name=EString
	(isContainment?=':')?
	'->'
	(type=[Entity|EString])
	('.' opposite=[Relation|EString])?
	('[' cardinality=Cardinality ']')?
	;

enum Cardinality returns Cardinality:
				zero_one = '0..1' | one = '1' | zero_many = '0..*' | one_many = '*';

EBooleanObject returns ecore::EBooleanObject:
	'true' | 'false';


	