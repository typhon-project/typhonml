grammar it.univaq.disim.typhon.TyphonML with org.eclipse.xtext.common.Terminals

//import "http://org.typhon.dsls.typhonml.sirius" 
import "platform:/resource/it.univaq.disim.typhonml/model/typhonml.ecore"
import "http://www.eclipse.org/emf/2002/Ecore" as ecore


Model returns Model:
	{Model}
		(dataTypes+=DataType)*
		(databases+=Database)*
;  

AddAttribute returns AddAttribute:
	{AddAttribute}
	'AddAttribute'
	name=EString
	'{'
		('importedNamespace' importedNamespace=EString)?
		('type' type=[DataType|EString])?
	'}';

DataType returns DataType:
	AddEntity | PrimitiveDataType_Impl | FreeText | CustomDataType | Entity_Impl;

Attribute returns Attribute:
	Attribute_Impl | AddAttribute;

Relation returns Relation:
	Relation_Impl | AddRelation;


GenericList returns GenericList:
	GenericList_Impl | Table | Collection | KeyValueElement | GraphNode;


Entity returns Entity:
	Entity_Impl | AddEntity;



Database returns Database:
	RelationalDB | DocumentDB | KeyValueDB | GraphDB | ColumnDB;

GraphAttribute returns GraphAttribute:
	GraphAttribute_Impl | AddGraphAttribute;





GraphEdge returns GraphEdge:
	GraphEdge_Impl | AddGraphEdge;




EString returns ecore::EString:
	STRING | ID;

AddEntity returns AddEntity:
	'AddEntity'
	name=EString
	'{'
		('importedNamespace' importedNamespace=EString)?
		'genericList' genericList=[GenericList|EString]
		('attributes' '{' attributes+=Attribute ( "," attributes+=Attribute)* '}' )?
		('relations' '{' relations+=Relation ( "," relations+=Relation)* '}' )?
		'identifer' identifer=EntityIdentifier
	'}';

PrimitiveDataType_Impl returns PrimitiveDataType:
	{PrimitiveDataType}
	'PrimitiveDataType'
	name=EString
	'{'
		('importedNamespace' importedNamespace=EString)?
	'}';

FreeText returns FreeText:
	{FreeText}
	'FreeText'
	name=EString
	'{'
		('importedNamespace' importedNamespace=EString)?
	'}';

CustomDataType returns CustomDataType:
	{CustomDataType}
	'CustomDataType'
	name=EString
	'{'
		('importedNamespace' importedNamespace=EString)?
		('elements' '{' elements+=DataTypeItem ( "," elements+=DataTypeItem)* '}' )?
	'}';

Entity_Impl returns Entity:
	'Entity'
	name=EString
	'{'
		('importedNamespace' importedNamespace=EString)?
		'genericList' genericList=[GenericList|EString]
		('attributes' '{' attributes+=Attribute ( "," attributes+=Attribute)* '}' )?
		('relations' '{' relations+=Relation ( "," relations+=Relation)* '}' )?
		'identifer' identifer=EntityIdentifier
	'}';

Attribute_Impl returns Attribute:
	{Attribute}
	'Attribute'
	name=EString
	'{'
		('importedNamespace' importedNamespace=EString)?
		('type' type=[DataType|EString])?
	'}';

Relation_Impl returns Relation:
	(isContainment?='isContainment')?
	'Relation'
	name=EString
	'{'
		('importedNamespace' importedNamespace=EString)?
		'cardinality' cardinality=Cardinality
		('type' type=[Entity|EString])?
		('opposite' opposite=[Relation|EString])?
	'}';

EntityIdentifier returns EntityIdentifier:
	{EntityIdentifier}
	'EntityIdentifier'
	'{'
		('attributes' '(' attributes+=[Attribute|EString] ( "," attributes+=[Attribute|EString])* ')' )?
	'}';

GenericList_Impl returns GenericList:
	'GenericList'
	'{'
		'entity' entity=[Entity|EString]
	'}';

enum Cardinality returns Cardinality:
				zero_one = 'zero_one' | one = 'one' | zero_many = 'zero_many' | one_many = 'one_many';

EBooleanObject returns ecore::EBooleanObject:
	'true' | 'false';

AddRelation returns AddRelation:
	(isContainment?='isContainment')?
	'AddRelation'
	name=EString
	'{'
		('importedNamespace' importedNamespace=EString)?
		'cardinality' cardinality=Cardinality
		('type' type=[Entity|EString])?
		('opposite' opposite=[Relation|EString])?
	'}';

Table returns Table:
	'Table'
	name=EString
	'{'
		('importedNamespace' importedNamespace=EString)?
		'entity' entity=[Entity|EString]
		('db' db=[Database|EString])?
		('indexSpec' indexSpec=IndexSpec)?
		('idSpec' idSpec=IdSpec)?
	'}';

Collection returns Collection:
	'Collection'
	name=EString
	'{'
		('importedNamespace' importedNamespace=EString)?
		'entity' entity=[Entity|EString]
	'}';

KeyValueElement returns KeyValueElement:
	'KeyValueElement'
	'{'
		('key' key=EString)?
		'entity' entity=[Entity|EString]
		('values' '(' values+=[DataType|EString] ( "," values+=[DataType|EString])* ')' )?
	'}';

GraphNode returns GraphNode:
	'GraphNode'
	name=EString
	'{'
		('importedNamespace' importedNamespace=EString)?
		'entity' entity=[Entity|EString]
		('attributes' '{' attributes+=GraphAttribute ( "," attributes+=GraphAttribute)* '}' )?
	'}';

IndexSpec returns IndexSpec:
	{IndexSpec}
	'IndexSpec'
	name=EString
	'{'
		('importedNamespace' importedNamespace=EString)?
		('attributes' '(' attributes+=[Attribute|EString] ( "," attributes+=[Attribute|EString])* ')' )?
		('references' '(' references+=[Relation|EString] ( "," references+=[Relation|EString])* ')' )?
	'}';

IdSpec returns IdSpec:
	{IdSpec}
	'IdSpec'
	'{'
		('attributes' '(' attributes+=[Attribute|EString] ( "," attributes+=[Attribute|EString])* ')' )?
	'}';

RelationalDB returns RelationalDB:
	{RelationalDB}
	'RelationalDB'
	name=EString
	'{'
		('importedNamespace' importedNamespace=EString)?
		('tables' '{' tables+=Table ( "," tables+=Table)* '}' )?
	'}';

DocumentDB returns DocumentDB:
	{DocumentDB}
	'DocumentDB'
	name=EString
	'{'
		('importedNamespace' importedNamespace=EString)?
		('collections' '{' collections+=Collection ( "," collections+=Collection)* '}' )?
	'}';

KeyValueDB returns KeyValueDB:
	{KeyValueDB}
	'KeyValueDB'
	name=EString
	'{'
		('importedNamespace' importedNamespace=EString)?
		('elements' '{' elements+=KeyValueElement ( "," elements+=KeyValueElement)* '}' )?
	'}';

GraphDB returns GraphDB:
	{GraphDB}
	'GraphDB'
	name=EString
	'{'
		('importedNamespace' importedNamespace=EString)?
		('nodes' '{' nodes+=GraphNode ( "," nodes+=GraphNode)* '}' )?
		('edges' '{' edges+=GraphEdge ( "," edges+=GraphEdge)* '}' )?
	'}';

ColumnDB returns ColumnDB:
	{ColumnDB}
	'ColumnDB'
	name=EString
	'{'
		('importedNamespace' importedNamespace=EString)?
		('columns' '{' columns+=Column ( "," columns+=Column)* '}' )?
	'}';

GraphEdge_Impl returns GraphEdge:
	{GraphEdge}
	'GraphEdge'
	name=EString
	'{'
		('importedNamespace' importedNamespace=EString)?
		('from' from=[GraphNode|EString])?
		('to' to=[GraphNode|EString])?
		('labels' '{' labels+=GraphEdgeLabel ( "," labels+=GraphEdgeLabel)* '}' )?
	'}';

GraphEdgeLabel returns GraphEdgeLabel:
	{GraphEdgeLabel}
	'GraphEdgeLabel'
	name=EString
	'{'
		('importedNamespace' importedNamespace=EString)?
		('type' type=[DataType|EString])?
	'}';

AddGraphEdge returns AddGraphEdge:
	{AddGraphEdge}
	'AddGraphEdge'
	name=EString
	'{'
		('importedNamespace' importedNamespace=EString)?
		('from' from=[GraphNode|EString])?
		('to' to=[GraphNode|EString])?
		('labels' '{' labels+=GraphEdgeLabel ( "," labels+=GraphEdgeLabel)* '}' )?
	'}';

Column returns Column:
	{Column}
	'Column'
	'{'
		('attributes' '(' attributes+=[Attribute|EString] ( "," attributes+=[Attribute|EString])* ')' )?
	'}';

GraphAttribute_Impl returns GraphAttribute:
	{GraphAttribute}
	'GraphAttribute'
	name=EString
	'{'
		('importedNamespace' importedNamespace=EString)?
		('value' value=[Attribute|EString])?
	'}';

AddGraphAttribute returns AddGraphAttribute:
	{AddGraphAttribute}
	'AddGraphAttribute'
	name=EString
	'{'
		('importedNamespace' importedNamespace=EString)?
		('value' value=[Attribute|EString])?
	'}';

DataTypeItem returns DataTypeItem:
	'DataTypeItem'
	name=EString
	'{'
		('importedNamespace' importedNamespace=EString)?
		('type' type=[DataType|EString])?
		'implementation' implementation=DataTypeImplementationPackage
	'}';

DataTypeImplementationPackage returns DataTypeImplementationPackage:
	{DataTypeImplementationPackage}
	'DataTypeImplementationPackage'
	'{'
		('location' location=EString)?
	'}';

	