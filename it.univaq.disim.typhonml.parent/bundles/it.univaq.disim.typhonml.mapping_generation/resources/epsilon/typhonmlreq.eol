
operation TyphonML!Entity hasTags(): Boolean{
   return self.functionalTags.notEmpty() and self.nfunctionalTags.notEmpty();
}


operation TyphonML!Entity feasabilityCheck(): List<Map>{
	//var mapRank = new Map<Integer, mapDBWithFNF>;
	var mapRank = new List<Map>;
	
			
	//For each DBType
	for(dbType in TyphonMLReq!DBType.allInstances()){
		var mapDBType = new Map<String, Map>;
			var listFunctionalAndNotFunctional = new List<Map>;
			var functionalMap = new Map<String, Set<String>>;
			var notFunctionalMap = new Map<String, Set<String>>;
			
			//Check Entity Functional Tags
			var functionalStringList = new Set<String>;
			for(fr in self.functionalTags){
				for(fRname in dbType.frequirements){
					if(fRname.name = fr.name){
						functionalStringList.add(fr.name);
					}
				}
			}
			functionalMap.put("functional", functionalStringList);
			
			//Check Entity Not Functional Tags
			var nfunctionalStringList = new Set<String>;
			for(nfr in self.nfunctionalTags){
				for(nfRname in dbType.nfrequirements){
					if(nfRname.name = nfr.name){
						nfunctionalStringList.add(nfr.name);
					}
				}
			}
			notFunctionalMap.put("notFunctional", nfunctionalStringList);
			
			listFunctionalAndNotFunctional.add(functionalMap);
			listFunctionalAndNotFunctional.add(notFunctionalMap);
			
			mapDBType.put(dbType.name, listFunctionalAndNotFunctional);
			mapRank.add(mapDBType);
	}
	
	return mapRank;
}

operation TyphonML!Entity feasabilityCheckString(): Sequence<String>{
	var mapRank = new OrderedSet<String>;
	
	//For each DBType
	for(dbType in TyphonMLReq!DBType.allInstances()){
		var mapDBType = new String;
			//dbType.name.println();
			//Check Entity Functional Tags
			var functionalStringList = new Set<String>;
			for(fr in self.functionalTags){
				for(fRname in dbType.frequirements){
					if(fRname.name = fr.name){
						functionalStringList.add(fr.name);
						//("\t" + fRname).println();
					}
				}
			}
			
			//Check Entity Not Functional Tags
			var nfunctionalStringList = new Set<String>;
			for(nfr in self.nfunctionalTags){
				for(nfRname in dbType.nfrequirements){
					if(nfRname.name = nfr.name){
						nfunctionalStringList.add(nfr.name);
						//("\t" + nfRname).println();
					}
				}
			}
			
			var sumReqs = calculateRank(functionalStringList.size(),nfunctionalStringList.size());
			mapDBType = sumReqs + ":" + dbType.dbType + ": [" + dbType.name + "] - fr[" + functionalStringList.size() + "], nfr[" + nfunctionalStringList.size() + "]";
			
			mapRank.add(mapDBType);
	}
	
	var tmp = mapRank.invert();
	return tmp;
}


operation calculateRank(fr: Integer, nfr: Integer): Real{
	var result = new Real;
	
	var p = 0.5;
	
	result = (fr * p) + (nfr * (1-p));
	return result;
}



operation TyphonML!Entity generateDatabaseForEntity(selectedDatabase : Map){
	var databaseName = selectedDatabase.keySet()->first();
	
	switch (databaseName) {
		case "Cassandra" : self.createColumnDB();
		case "HBase" : self.createColumnDB();
		case "MongoDB" : self.createDocumentDB();
		case "MySQL" : self.createRelationalDB();
		case "Riak" : self.createRelationalDB();
		case "Redis" : self.createKeyValueDB();
		default : self.createDocumentDB(); 
	}
}


operation TyphonML!Entity createRelationalDB(){
	var db;
	var dbList = TyphonML!RelationalDB.allInstances();
	if(dbList.notEmpty()){
		db = System.user.choose("Select DB", dbList);
	}
	
	if(db.isUndefined()){
		db = new TyphonML!RelationalDB;
		db.name = self.name + "Database";
		self.eContainer().databases.add(db);
	}
	
	var table = new TyphonML!Table;
	table.name = self.name + "Table";
	table.entity = self;
	table.db = db;
	db.tables.add(table);
	
	(db.name+" [RelationalDB] created for "+self.name+ " entity.").println();
}

operation TyphonML!Entity createDocumentDB(){
	var db = new TyphonML!DocumentDB;
	var dbName = self.name + "Collection";
	db.name = dbName;
	var newCollection = new TyphonML!`Collection`;
	newCollection.name = dbName;
	newCollection.entity = self;
	db.collections.add(newCollection);
	self.eContainer().databases.add(db);
	(dbName+" [DocumentDB] created for "+self.name+ " entity.").println();
}

operation TyphonML!Entity createKeyValueDB(){
	var db = new TyphonML!KeyValueDB;
	var dbName = self.name + "KeyValueDB";
	db.name = dbName;
	
	(dbName+" [KeyValueDB] created for "+self.name+ " entity.").println();
}

operation TyphonML!Entity createGraphDB(){
	var db = new TyphonML!GraphDB;
	var dbName = self.name + "GraphDB";
	db.name = dbName;
	
	(dbName+" [GraphDB] created for "+self.name+ " entity.").println();
}

operation TyphonML!Entity createColumnDB(){
	var db = new TyphonML!ColumnDB;
	var dbName = self.name + "ColumnDB";
	db.name = dbName;
	
	(dbName+" [ColumnDB] created for "+self.name+ " entity.").println();
}


