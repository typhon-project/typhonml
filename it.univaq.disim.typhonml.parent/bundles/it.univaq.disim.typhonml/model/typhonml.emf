@"http://www.eclipse.org/OCL/Import"(ecore="http://www.eclipse.org/emf/2002/Ecore")
@Ecore(invocationDelegates="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot", settingDelegates="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot", validationDelegates="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot")
@namespace(uri="http://org.typhon.dsls.typhonml.sirius", prefix="typhonml")
package typhonml;

class Model {
  val Database[*] databases;
  val DataType[*] dataTypes;
  val ChangeOperator[*] changeOperators;
}

abstract class NamedElement {
  attr String[1] name;
  attr String importedNamespace;
}



abstract class Database extends NamedElement {
}

abstract class DataType extends NamedElement {
}

class CustomDataType extends DataType {
  val DataTypeItem[*] elements;
}

class DataTypeItem extends NamedElement {
  ref DataType type;
  val DataTypeImplementationPackage[1] implementation;
}


class DataTypeImplementationPackage {
  attr String location;
}

/*
class PrimitiveDataTypeAttribute extends Attribute {
  attr PrimitiveDataType[1] type;
  attr int maxSize;
}
*/

class CustomDataTypeAttribute extends Attribute {
  ref CustomDataType[1] type;
}


class FunctionalTag extends NamedElement {
}

class NFunctionalTag extends NamedElement {
}


class Entity extends DataType {

  @"http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot"(body="typhonml::Collection.allInstances()->select(e|e.entity = self)")
  @"http://www.eclipse.org/OCL/Collection"(nullFree="false")
  !ordered op Collection[*] getCollections();

  @"http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot"(body="typhonml::Table.allInstances()->select(e|e.entity = self)")
  @"http://www.eclipse.org/OCL/Collection"(nullFree="false")
  !ordered op Table[*] getTables();

  @"http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot"(body="typhonml::KeyValueElement.allInstances()->select(e|e.entity = self)")
  @"http://www.eclipse.org/OCL/Collection"(nullFree="false")
  !ordered op KeyValueElement[*] getKeyValueElements();

  @"http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot"(body="typhonml::GraphNode.allInstances()->select(e|e.entity = self)")
  @"http://www.eclipse.org/OCL/Collection"(nullFree="false")
  !ordered op GraphNode[*] getGraphNodes();

  @"http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot"(body="typhonml::Column.allInstances()->select(e|e.entity = self)")
  @"http://www.eclipse.org/OCL/Collection"(nullFree="false")
  !ordered op Column[*] getColumns();
  val Attribute[*] attributes;
  val FreeText[*] fretextAttributes;
  val Relation[*] relations;
  val FunctionalTag[*] functionalTags;
  val NFunctionalTag[*] nfunctionalTags;
}

abstract class Attribute extends NamedElement {
}

class Relation extends NamedElement {
  ref Entity type;
  attr Cardinality[1] cardinality;
  ref Relation opposite;
  attr Boolean isContainment;
}

class RelationalDB extends Database {
  val Table[*] tables;
}

class Table extends NamedElement {
  val IndexSpec#table indexSpec;
  val IdSpec#table idSpec;
  ref Database db;
  ref Entity entity;
}

class IndexSpec extends NamedElement {
  ref Attribute[*] attributes;
  ref Relation[*] references;
  ref Table[1]#indexSpec table;
}

class IdSpec {
  ref Attribute[*] attributes;
  ref Table[1]#idSpec table;
}

class DocumentDB extends Database {
  val Collection[*] collections;
}

class Collection extends NamedElement {
  ref Entity entity;
}

class KeyValueDB extends Database {
  val KeyValueElement[*] elements;
}

class KeyValueElement extends NamedElement {
  attr String key;
  ref Attribute[*] values;
  ref Entity entity;
}

class GraphDB extends Database {
  val GraphNode[*] nodes;
  val GraphEdge[*] edges;
}

class GraphNode extends NamedElement {
  val GraphAttribute[*] attributes;
  ref Entity entity;
}

class GraphAttribute extends NamedElement {
  ref Attribute value;
}

class GraphEdge extends NamedElement {
  ref GraphNode from;
  ref GraphNode to;
  val GraphEdgeLabel[*] labels;
}

class GraphEdgeLabel extends NamedElement {
  ref DataType type;
}

class ColumnDB extends Database {
  val Column[*] columns;
}

class Column extends NamedElement {
  ref Attribute[*] attributes;
  ref Entity entity;
}


class FreeText extends NamedElement {
  val NlpTask[1] tasks;
  attr String workflowName;
}

class NlpTask {
  attr NlpTaskType type;
  attr String[*] parameters;
}














abstract class ChangeOperator {
}

class AddEntity extends Entity, ChangeOperator {
}

class RenameEntity extends ChangeOperator {
  ref Entity entityToRename;
  attr String newEntityName;
}


class RemoveEntity extends ChangeOperator {
  ref Entity[1] entityToRemove;
}

abstract class AddAttribute extends Attribute, ChangeOperator {
  ref Entity[1] ownerEntity;
}

abstract class ChangeAttributeType extends ChangeOperator {
  ref Attribute[1] attributeToChange;
}

class RemoveAttribute extends ChangeOperator {
  ref Attribute[1] attributeToRemove;
}

class RenameAttribute extends ChangeOperator {
  ref Attribute[1] attributeToRename;
  attr String newName;
}

class ChangeRelationContainement extends ChangeOperator {
  ref Relation[1] relation;
  attr Boolean[1] newContainment;
}

class AddRelation extends Relation, ChangeOperator {
  ref Entity[1] ownerEntity;
}

class RemoveRelation extends ChangeOperator {
  ref Relation[1] relationToRemove;
}

class RenameRelation extends ChangeOperator {
  ref Relation[1] relationToRename;
  attr String newRelationName;
}

class EnableRelationContainment extends ChangeOperator {
  ref Relation[1] relation;
}

class DisableRelationContainment extends ChangeOperator {
  ref Relation[1] relation;
}

class EnableBidirectionalRelation extends ChangeOperator {
  ref Relation[1] relation;
}

class DisableBidirectionalRelation extends ChangeOperator {
  ref Relation[1] relation;
}

class ChangeRelationCardinality extends ChangeOperator {
  ref Relation[1] relation;
  attr Cardinality[1] newCardinality;
}

class SplitEntity extends ChangeOperator {
  ref Entity[1] entityToBeSplit;
  val Entity[1] firstNewEntity;
  val Entity[1] secondNewEntity;
}

class SplitEntityVertical extends ChangeOperator {
  ref Entity[1] entity1;
  attr String[1] entity2name;
  ref Attribute[*] attributeList;
  ref Relation[*] relationList;
}

class SplitEntityHorizontal extends ChangeOperator {
  ref Entity[1] entity1;
  attr String[1] entity2name;
  ref Attribute[1] attribute;
  attr String expression;
}

class MigrateEntity extends ChangeOperator {
  ref Entity[1] entity;
  ref Database[1] newDatabase;
}

class MergeEntity extends ChangeOperator {
  ref Entity[1] firstEntityToMerge;
  ref Entity[1] secondEntityToMerge;
  attr String newEntityName;
}

class RenameTable extends ChangeOperator {
  ref Table[1] tableToRename;
  attr String newName;
}

class AddIndex extends ChangeOperator {
  ref Table[1] table;
  ref Attribute[*] attributes;
}

class DropIndex extends ChangeOperator {
  ref Table[1] table;
}

class AddAttributesToIndex extends ChangeOperator {
  ref Table[1] table;
  ref Attribute[*] attributes;
}

class RemoveAttributesToIndex extends ChangeOperator {
  ref Table[1] table;
  ref Attribute[*] attributes;
}

class RenameCollection extends ChangeOperator {
  ref Collection[1] collectionToRename;
  attr String newName;
}

class AddCollectionIndex extends ChangeOperator {
  ref Collection[1] collection;
  ref Attribute[*] attributes;
}

class DropCollectionIndex extends ChangeOperator {
  ref Collection[1] collection;
}

class AddGraphAttribute extends GraphAttribute, ChangeOperator {
}

class RemoveGraphAttribute extends ChangeOperator {
  ref GraphNode[1] node;
}

class AddGraphEdge extends ChangeOperator, GraphEdge {
}

class RemoveGraphEdge extends ChangeOperator {
  ref GraphEdge[1] graphEdgeToRemove;
}

class RenabeGraphEdgeLabel extends ChangeOperator {
  ref GraphEdge[1] edge;
  attr String newName;
}

class AddCustomDataTypeAttribute extends AddAttribute, CustomDataTypeAttribute {
}

/*
class AddPrimitiveDataTypeAttribute extends AddAttribute, PrimitiveDataTypeAttribute {
}
*/

class ChangePrimitiveDataTypeAttribute extends ChangeAttributeType {
  attr int maxSize;
  attr PrimitiveDataType[1] newType;
}

class ChangeCustomDataTypeAttribute extends ChangeAttributeType {
  ref CustomDataType[1] newType;
}

enum NlpTaskType {
  ParagraphSegmentation = 0;
  SentenceSegmentation = 1;
  Tokenisation = 2;
  PhraseExtractor = 3;
  NGramExtractor = 4;
  POSTagging = 5;
  Lemmatisation = 6;
  Stemming = 7;
  DependencyParsing = 8;
  Chunking = 9;
  SentimentAnalysis = 10;
  TextClassification = 11;
  TopicModelling = 12;
  TermExtraction = 13;
  NamedEntityRecognition = 14;
  RelationExtraction = 15;
  EventExtraction = 16;
  CoreferenceResolution = 17;
}

enum Cardinality {
  zero_one = 0;
  one = 1;
  zero_many = 2;
  one_many = 3;
}

enum PrimitiveDataType {
  bigint = 0;
  string = 1;
  text = 2;
  point = 3;
  polygon = 4;
  bool = 5;
  float = 6;
  int = 7;
  blob = 8;
  date = 9;
  datetime = 10;
}
