
/*
 	God Table
	This smell arises when a table contains excessive number of attributes. 
	Rationale: Excessive number of attributes tend to violate the principles 
		of normalization which in turn introduce a variety of problems. 
		Additionally, it impacts maintainability of the database. 
*/
operation Entity checkGodTable(maxNumberOfAttributes : Integer) : Boolean{
	if(self.attributes.size > maxNumberOfAttributes){
		return true;
	}else{
		return false;
	}
}


/*
 	Overloaded attribute names 
	This smell occurs when two or more attributes are defined with 
		identical names but as distinct data types in different tables.
	Rationale: Identical names with different data types create 
		confusion and could lead to subtle bugs in queries.
*/
operation getOverloadedAttributeName() : Map{
	var returnMap: Map;
	return returnMap;
}

operation Entity checkOverloadedAttributeName() : String{
	//delete self entity from the list of all entities
	var filteredEntities = TyphonML!Entity.allInstances()->select(e|e <> self);
	for(selfAttribute in self.attributes){
		for(entity in filteredEntities){
			for(attribute in entity.attributes){
				if(selfAttribute.name == attribute.name){
					if(selfAttribute.type.name <> attribute.type.name){
						return selfAttribute.name;
					}
				}
			}
		}
	}
	return null;
}





/*
 	Meaningless name 
	This smell occurs when a table or an attribute name is cryptic or meaningless 
	Rationale: Meaningless or cryptic names hamper readability of the databaseâ€™s schema. 
*/
operation Entity checkMeaninglessName(): String{
	var wordNet = new Native("typhonmlwordnetutility.WordNet");
	if(not wordNet.checkifWordExists(self.name)){
		return self.name;
	}else{
		for(attr in self.attributes){
			if(not wordNet.checkifWordExists(attr.name)){
				return attr.name;
			}
		}
	}
	return null;
}


operation Entity checkPluralName(): String{
	var wordNet = new Native("typhonmlwordnetutility.WordNet");
	if(wordNet.checkIfWordPlural(self.name)){
		return self.name;
	}else{
		for(attr in self.attributes){
			if(wordNet.checkIfWordPlural(attr.name)){
				return attr.name;
			}
		}
	}
	return null;
}

operation Entity checkUseSpacesforTableNames(): String{
	if(" ".isSubstringOf(self.name)){
		return self.name;
	}else{
		for(attr in self.attributes){
			if(" ".isSubstringOf(attr.name)){
				attr.name.println();
				return attr.name;
			}
		}
	}
	return null;
}

operation Entity checkUseOfUnnecessaryPrefixOrSuffixForTableNames(): String{
    var wordNet = new Native("typhonmlwordnetutility.WordNet");
    var filteredEntities = TyphonML!Entity.allInstances()->select(e|e <> self);
    //For all the other entities different for sel check the name suffix
    for(s in filteredEntities){
	    if(wordNet.isSuffix(self.name, s.name) or wordNet.isPrefix(self.name, s.name)){
			return self.name;
		}
    }
	return null;
}



operation TyphonML!Table checkIDFieldsForTablesAreMissing() : Boolean{
	if(self.idSpec <> null){
		if(self.idSpec.attributes <> null){
			return true;
		}
	}
	return false;
}

operation TyphonML!Table checkUseOfVarcharDataTypesForIndexing() : Boolean{
	if(self.indexSpec <> null){
		if(self.indexSpec.attributes <> null){
			for(attr in self.indexSpec.attributes){
				if(attr.type.name.toLowerCase() == "string"){
					return true;
				}
			}
		}
	}
	return false;
}

