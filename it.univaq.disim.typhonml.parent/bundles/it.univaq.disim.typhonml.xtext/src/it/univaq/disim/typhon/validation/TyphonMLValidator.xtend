/*
 * generated by Xtext 2.15.0
 */
package it.univaq.disim.typhon.validation

import org.eclipse.xtext.validation.Check
import typhonml.Entity
import typhonml.TyphonmlPackage
import typhonml.Relation
import java.util.HashSet

/**
 * This class contains custom validation rules. 
 *
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
class TyphonMLValidator extends AbstractTyphonMLValidator {
	
protected static val ISSUE_CODE_PREFIX = "org.example.entities.";

	public static val HIERARCHY_CYCLE = ISSUE_CODE_PREFIX + "HierarchyCycle";

	public static val INVALID_ENTITY_NAME = ISSUE_CODE_PREFIX + "InvalidEntityName";

	public static val INVALID_ATTRIBUTE_NAME = ISSUE_CODE_PREFIX + "InvalidAttributeName";

	@Check
	def checkNoCycleInEntityContainment(Entity entity) {
		if (entity.relations === null)
			return // nothing to check
		//val visitedEntities = newHashSet(entity)
		else {
			val visitedEntities = newHashSet()
			if (checkRecursively(entity, visitedEntities))
				return 
			else 
	 			error("cycle in containment of entity '" + entity.name + "'",
	 					entity,
						TyphonmlPackage.eINSTANCE.entity_Relations,
						1,
						HIERARCHY_CYCLE,
						entity.name)
		}
		
	}
	
	def boolean checkRecursively(Entity entity, HashSet<Entity> entityHashSet){
		if (entityHashSet.contains(entity)) {
			return false
		}
		entityHashSet.add(entity)
		var returnValue = true;
		val mySet = newHashSet()
		for (relation : entity.relations){
			if(relation.isContainment !== null && relation.isContainment)
				mySet.add(relation.type)
		}
		for (entityRel : mySet)
			returnValue = returnValue && checkRecursively(entityRel, entityHashSet)
		return returnValue
		
	}
	
}
