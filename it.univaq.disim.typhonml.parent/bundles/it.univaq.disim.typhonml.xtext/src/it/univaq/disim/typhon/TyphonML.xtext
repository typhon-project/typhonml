grammar it.univaq.disim.typhon.TyphonML with org.eclipse.xtext.common.Terminals

//import "http://org.typhon.dsls.typhonml.sirius" 
import "platform:/resource/it.univaq.disim.typhonml/model/typhonml.ecore"
import "http://www.eclipse.org/emf/2002/Ecore" as ecore


Model returns Model:
	{Model}
		(entities+=Entity)*
		(customDataTypes+=CustomDataType)*
		(databases+=Database)*
		('changeOperators' '['(changeOperators+=ChangeOperator)("," changeOperators+=ChangeOperator)*']')?
		;  





/**************************************************************************************
 ************** DATA TYPE *************************************************************
 *************************************************************************************/

DataType returns DataType:
	IntType | 
	BigintType | 
	StringType | 
	TextType | 
	PointType | 
	PolygonType | 
	BoolType | 
	FloatType | 
	BlobType | 
	FreetextType | 
	DateType | 
	DatetimeType | 
	CustomDataType
	;

	
EBooleanObject returns ecore::EBooleanObject:
	'true' | 'false';

EString returns ecore::EString:
	STRING | ID;

EInt returns ecore::EInt:
	INT;
	
	

IntType returns IntType:
	{IntType}
	'int'
	;

BigintType returns BigintType:
	{BigintType}
	'bigint'
	;

StringType returns StringType:
	{StringType}
	'string' ('[' maxSize=EInt ']')?
	;

TextType returns TextType:
	{TextType}
	'text'
	;

PointType returns PointType:
	{PointType}
	'point'
	;

PolygonType returns PolygonType:
	{PolygonType}
	'polygon'
	;

BoolType returns BoolType:
	{BoolType}
	'bool'
	;

FloatType returns FloatType:
	{FloatType}
	'float'
	;

BlobType returns BlobType:
	{BlobType}
	'blob'
	;

FreetextType returns FreetextType:
	{FreetextType}
	'freetext' ('[' tasks+=NlpTask ( "," tasks+=NlpTask)* ']' )?
	;
	
//	'freetext' '['workflowName=EString ',' tasks=NlpTask ']'
//	;

DateType returns DateType:
	{DateType}
	'date'
	;

DatetimeType returns DatetimeType:
	{DatetimeType}
	'datetime'
	;



NlpTask:
	{NlpTask}
	(type=NlpTaskType) '[' (workflowName=EString) ']'
	;
//	type=NlpTaskType
//	(parameters+=EString)?
//	;





CustomDataType returns CustomDataType:
	{CustomDataType}
	('importedNamespace' importedNamespace=EString)?
	'customdatatype' name=EString '{'
		('elements' '{' elements+=CustomDataTypeItem ( ',' elements+=CustomDataTypeItem)* '}' )?
	'}';
	
CustomDataTypeItem returns CustomDataTypeItem:
	('importedNamespace' importedNamespace=EString)?
	name=EString ':' (type=[DataType|EString]) '[' implementation=CustomDataTypeImplementationPackage']'
	;

CustomDataTypeImplementationPackage returns CustomDataTypeImplementationPackage:
	{CustomDataTypeImplementationPackage}
	location=EString
	;
	



	
	
	
	
	
	

/**************************************************************************************
 ************** ENTITY ****************************************************************
 *************************************************************************************/
 
Entity returns Entity:
	/*
	 * As a metamodel it would be correct, but I need to not add a new entity outside the changeoperators [] tag. 
	 * If I leave it that way I get the "add" for adding a new entity out.
	 */
//	Entity_Impl | AddEntity; 
	Entity_Impl;
	
	
Entity_Impl returns Entity:
	('@functionalTags' '('(functionalTags+=FunctionalTag_Impl (',' functionalTags+=FunctionalTag_Impl)*)?')')?
	('@nFunctionalTags' '('(nfunctionalTags+=NFunctionalTag_Impl (',' nfunctionalTags+=NFunctionalTag_Impl)*)?')')?
	('importedNamespace' importedNamespace=EString)?
	'entity' name=EString '{'
		(attributes+=EntityAttribute (attributes+=EntityAttribute)*)?
		(relations+=Relation (relations+=Relation)*)?
	'}';


FunctionalTag_Impl returns FunctionalTag:
	name=EString
;	
NFunctionalTag_Impl returns NFunctionalTag:
	name=EString
;
	



Attribute returns Attribute:
	Attribute_Impl | AddCustomDataTypeAttribute;

EntityAttribute returns EntityAttribute:
	Attribute_Impl | CustomAttribute | AddCustomDataTypeAttribute;
	
	
Attribute_Impl returns Attribute:
	{Attribute}
	('importedNamespace' importedNamespace=EString)?
	name=EString ':' (type=DataType)
	;

CustomAttribute returns CustomAttribute:
	{CustomAttribute}
	('importedNamespace' importedNamespace=EString)?
	name=EString ':' (type=[CustomDataType|EString])
	;

//AddAttribute returns AddAttribute:
//	{AddAttribute}
//	('importedNamespace' importedNamespace=EString)?
//	'add' 'attribute'
//	name=EString ':' type=PrimitiveDataType 'to' ownerEntity=[Entity|EString]
//	;

/* 
AddAttribute returns AddAttribute:
	AddCustomDataTypeAttribute_Impl |
	AddPrimitiveDataTypeAttribute_Impl;

AddPrimitiveDataTypeAttribute_Impl returns AddPrimitiveDataTypeAttribute:
	{AddPrimitiveDataTypeAttribute}
	('importedNamespace' importedNamespace=EString)?
	'add' 'attribute'
	name=EString ':' type=PrimitiveDataType ('('maxSize=INT')')? 'to' ownerEntity=[Entity|EString]	
;
*/



Relation returns Relation:
	Relation_Impl;


Relation_Impl returns Relation:
	('importedNamespace' importedNamespace=EString)?
	name=EString
	(isContainment?=':')?
	'->'
		(type=[Entity|EString])
		('.' opposite=[Relation|EString])?
		('[' cardinality=Cardinality ']')?
	;





	
	
	
	
	
	
/**************************************************************************************
 ************** DATABASE **************************************************************
 *************************************************************************************/

Database returns Database:
	RelationalDB | DocumentDB | KeyValueDB | GraphDB | ColumnDB;

GraphAttribute returns GraphAttribute:
	GraphAttribute_Impl | AddGraphAttribute;

GraphEdge returns GraphEdge:
	GraphEdge_Impl | AddGraphEdge;


Table returns Table:
	('importedNamespace' importedNamespace=EString)?
	'table'
	'{'
		name=EString ':' entity=[Entity|EString]?
		('db' db=[Database|EString])?
		(indexSpec=IndexSpec)?
		(idSpec=IdSpec)?
	'}';

Collection returns Collection:
	('importedNamespace' importedNamespace=EString)?
	name=EString ':' entity=[Entity|EString]
	;

KeyValueElement returns KeyValueElement:
	('importedNamespace' importedNamespace=EString)?
	name=EString '{' key=EString '->' '('	
	( values+=[Attribute|EString]  ( "," values+=[Attribute|EString] )*)?
	')'
//		'entity' entity=[Entity|EString]
//		('values' '(' values+=[DataType|EString] ( "," values+=[DataType|EString])* ')' )?
	'}';

GraphNode returns GraphNode:
	('importedNamespace' importedNamespace=EString)?
	'node' name=EString '!' entity=[Entity|EString]
		('{' attributes+=GraphAttribute ( "," attributes+=GraphAttribute)* '}' )?
	'}';

Column returns Column:
	('importedNamespace' importedNamespace=EString)?
	'column' name=EString '{'
		'entity' entity=[Entity|EString]
		('attributes' '(' attributes+=[Attribute|EString] ( "," attributes+=[Attribute|EString])* ')' )?
	'}';

IndexSpec returns IndexSpec:
	{IndexSpec}
	('importedNamespace' importedNamespace=EString)?
	'index' name=EString '{'
		('attributes' '(' attributes+=[Attribute|EString] ( "," attributes+=[Attribute|EString])* ')' )?
		('references' '(' references+=[Relation|EString] ( "," references+=[Relation|EString])* ')' )?
	'}';

IdSpec returns IdSpec:
	{IdSpec}
	'idSpec' ('(' attributes+=[Attribute|EString] ( "," attributes+=[Attribute|EString])* ')' )?
	;

RelationalDB returns RelationalDB:
	{RelationalDB}
	('importedNamespace' importedNamespace=EString)?
	'relationaldb' name=EString '{'
		('tables' '{' tables+=Table (tables+=Table)* '}' )?
	'}';

DocumentDB returns DocumentDB:
	{DocumentDB}
	('importedNamespace' importedNamespace=EString)?
	'documentdb' name=EString '{'
		('collections' '{' collections+=Collection ( collections+=Collection)* '}' )?
	'}';

KeyValueDB returns KeyValueDB:
	{KeyValueDB}
	('importedNamespace' importedNamespace=EString)?
	'keyvaluedb' name=EString '{'
		('elements' '{' elements+=KeyValueElement ( "," elements+=KeyValueElement)* '}' )?
	'}';

GraphDB returns GraphDB:
	{GraphDB}
	('importedNamespace' importedNamespace=EString)?
	'graphdb' name=EString '{'
		('nodes' '{' nodes+=GraphNode ( "," nodes+=GraphNode)* '}' )?
		('edges' '{' edges+=GraphEdge ( "," edges+=GraphEdge)* '}' )?
	'}';

ColumnDB returns ColumnDB:
	{ColumnDB}
	('importedNamespace' importedNamespace=EString)?
	'columndb' name=EString '{'
		('columns' '{' columns+=Column ( "," columns+=Column)* '}' )?
	'}';

GraphEdge_Impl returns GraphEdge:
	{GraphEdge}
	('importedNamespace' importedNamespace=EString)?
	'edge' name=EString '{'
		('from' from=[GraphNode|EString])?
		('to' to=[GraphNode|EString])?
		('labels' '{' labels+=GraphEdgeLabel ( "," labels+=GraphEdgeLabel)* '}' )?
	'}';

GraphEdgeLabel returns GraphEdgeLabel:
	{GraphEdgeLabel}
	('importedNamespace' importedNamespace=EString)?
	name=EString ':' type=[DataType|EString]
	;
	

GraphAttribute_Impl returns GraphAttribute:
	{GraphAttribute}
	('importedNamespace' importedNamespace=EString)?
	name=EString '=' value=[Attribute|EString]?
	;




	
	
/**************************************************************************************
 ************** CHANGE OPERATORS*******************************************************
 *************************************************************************************/

ChangeOperator returns ChangeOperator:
	AddEntity | 
	RenameEntity | 
	RemoveEntity | 
	RemoveAttribute | 
	RenameAttribute | 
	ChangeRelationContainement | 
	AddRelation | 
	RemoveRelation | 
	RenameRelation | 
	EnableRelationContainment | 
	DisableRelationContainment | 
	EnableBidirectionalRelation | 
	DisableBidirectionalRelation | 
	ChangeRelationCardinality | 
	SplitEntity | 
	SplitEntityVertical | 
	SplitEntityHorizontal | 
	MigrateEntity | 
	MergeEntity | 
	RenameTable | 
	AddIndex | 
	DropIndex | 
	AddAttributesToIndex | 
	RemoveAttributesToIndex | 
	RenameCollection | 
	AddCollectionIndex | 
	DropCollectionIndex | 
	AddGraphAttribute | 
	RemoveGraphAttribute | 
	AddGraphEdge | 
	RemoveGraphEdge | 
	RenabeGraphEdgeLabel | 
	AddCustomDataTypeAttribute | 
	ChangePrimitiveDataTypeAttribute | 
	ChangeCustomDataTypeAttribute
	;


AddCustomDataTypeAttribute returns AddCustomDataTypeAttribute:
	'AddCustomDataTypeAttribute'
	name=EString
	'{'
		('importedNamespace' importedNamespace=EString)?
		'ownerEntity' ownerEntity=[Entity|EString]
		'type' type=CustomDataType
	'}';

ChangePrimitiveDataTypeAttribute returns ChangePrimitiveDataTypeAttribute:
	'ChangePrimitiveDataTypeAttribute'
	'{'
		('maxSize' maxSize=EInt)?
		'attributeToChange' attributeToChange=[Attribute|EString]
	'}';

ChangeCustomDataTypeAttribute returns ChangeCustomDataTypeAttribute:
	'ChangeCustomDataTypeAttribute'
	'{'
		'attributeToChange' attributeToChange=[Attribute|EString]
		'newType' newType=[CustomDataType|EString]
	'}';








AddEntity returns AddEntity:
	('importedNamespace' importedNamespace=EString)?
	'add' 'entity'
	name=EString
	'{'
		('attributes' '[' 
			(attributes+=Attribute ( ',' attributes+=Attribute)*)*
			']')?
		('relations' '[' 
			(relations+=AddRelation (',' relations+=AddRelation)*)*
			']')?
	'}';
	
RenameEntity returns RenameEntity :
	'rename' 'entity' entityToRename=[Entity|EString] 'as' newEntityName=EString  
;

RemoveEntity returns RemoveEntity :
	'remove' 'entity' entityToRemove=[Entity|EString]  
;

SplitEntity returns SplitEntity:
	'SplitEntity'
	'{'
		'entityToBeSplit' entityToBeSplit=[Entity|EString]
		'firstNewEntity' firstNewEntity=Entity
		'secondNewEntity' secondNewEntity=Entity
	'}';
	
MigrateEntity returns MigrateEntity:
	'migrate' entity=[Entity|EString] 'to' newDatabase=[Database|EString]
;

SplitEntityVertical returns SplitEntityVertical:
	'split' 'entity' 'vertical' entity1=[Entity|EString] 'to' entity2name=EString
	'attributes:' '['
		(attributeList+=[Attribute|EString] (',' attributeList+=[Attribute|EString])*)*	
	']'
;

SplitEntityHorizontal returns SplitEntityHorizontal:
	'split' 'entity' 'horizontal' entity1=[Entity|EString] 'to' entity2name=EString 'where'attribute=[Attribute|EString] 'value' expression=STRING
;

MergeEntity returns MergeEntity:
	'merge' 'entities' firstEntityToMerge=[Entity|EString] secondEntityToMerge=[Entity|EString] 'as' newEntityName=EString
;

RenameAttribute returns RenameAttribute :
	'rename' 'attribute' attributeToRename=[Attribute|EString] 'as' newName=EString  
;

RemoveAttribute returns RemoveAttribute :
	'remove' 'attribute' attributeToRemove=[Attribute|EString]  
;

AddRelation returns AddRelation:
	('importedNamespace' importedNamespace=EString)?
	'add' 'relation' 
	name=EString 'to' ownerEntity=[Entity|EString]
	(isContainment?=':')?
	'->'
	(type=[Entity|EString])
	('.' opposite=[Relation|EString])?
	('[' cardinality=Cardinality ']')?		
	;
	
RenameRelation returns RenameRelation:
	'rename' 'relation' relationToRename=[Relation|EString] 'as' newRelationName=EString
;


RemoveRelation returns RemoveRelation:
	'remove' 'relation' relationToRemove=[Relation|EString]
;

ChangeRelationContainement returns ChangeRelationContainement :
	'change' 'containment' relation=[Relation|EString] 'as' newContainment=EBooleanObject 
;

ChangeRelationCardinality returns ChangeRelationCardinality:
	'change' 'cardinality' relation=[Relation|EString] 'as' newCardinality=Cardinality
;

EnableRelationContainment returns EnableRelationContainment:
	'EnableRelationContainment'
	'{'
		'relation' relation=[Relation|EString]
	'}';

DisableRelationContainment returns DisableRelationContainment:
	'DisableRelationContainment'
	'{'
		'relation' relation=[Relation|EString]
	'}';

EnableBidirectionalRelation returns EnableBidirectionalRelation:
	'EnableBidirectionalRelation'
	'{'
		'relation' relation=[Relation|EString]
	'}';

DisableBidirectionalRelation returns DisableBidirectionalRelation:
	'DisableBidirectionalRelation'
	'{'
		'relation' relation=[Relation|EString]
	'}';






AddAttributesToIndex returns AddAttributesToIndex:
	'extends' 'tableindex' table=[Table|EString] '{'
		attributes+=[Attribute|EString] ( "," attributes+=[Attribute|EString])?
	'}';
	
RemoveAttributesToIndex returns RemoveAttributesToIndex:
	'reduce' 'tableindex' table=[Table|EString] '{'
		attributes+=[Attribute|EString] ( "," attributes+=[Attribute|EString])? 
	'}';

RenameTable returns RenameTable:
	'rename' 'table' tableToRename=[Table|EString] 'as' newName=EString
	;

DropIndexTable returns DropIndex:
	'drop' 'tableindex' table=[Table|EString]
	;

AddIndexTable returns AddIndex:
	'create' 'tableindex' table=[Table|EString] '{'
		attributes+=[Attribute|EString] ( "," attributes+=[Attribute|EString])?
	'}'	
;

AddIndex returns AddIndex:
	'AddIndex'
	'{'
		'table' table=[Table|EString]
		('attributes' '(' attributes+=[Attribute|EString] ( "," attributes+=[Attribute|EString])* ')' )?
	'}';

DropIndex returns DropIndex:
	'DropIndex'
	'{'
		'table' table=[Table|EString]
	'}';





AddGraphAttribute returns AddGraphAttribute:
	{AddGraphAttribute}
	('importedNamespace' importedNamespace=EString)?
	'AddGraphAttribute'
	name=EString '{'
		('value' value=[Attribute|EString])?
	'}';

AddGraphEdge returns AddGraphEdge:
	{AddGraphEdge}
	('importedNamespace' importedNamespace=EString)?
	'AddGraphEdge'
	name=EString '{'
		('from' from=[GraphNode|EString])?
		('to' to=[GraphNode|EString])?
		('labels' '{' labels+=GraphEdgeLabel ( "," labels+=GraphEdgeLabel)* '}' )?
	'}';
	
RemoveGraphAttribute returns RemoveGraphAttribute:
	'RemoveGraphAttribute'
	'{'
		'node' node=[GraphNode|EString]
	'}';

RemoveGraphEdge returns RemoveGraphEdge:
	'RemoveGraphEdge'
	'{'
		'graphEdgeToRemove' graphEdgeToRemove=[GraphEdge|EString]
	'}';

RenabeGraphEdgeLabel returns RenabeGraphEdgeLabel:
	'RenabeGraphEdgeLabel'
	'{'
		('newName' newName=EString)?
		'edge' edge=[GraphEdge|EString]
	'}';




AddCollectionIndex returns AddCollectionIndex:
	'AddCollectionIndex'
	'{'
		'collection' collection=[Collection|EString]
		('attributes' '(' attributes+=[Attribute|EString] ( "," attributes+=[Attribute|EString])* ')' )?
	'}';

DropCollectionIndex returns DropCollectionIndex:
	'DropCollectionIndex'
	'{'
		'collection' collection=[Collection|EString]
	'}';

RenameCollection returns RenameCollection:
	'rename' 'collection' collectionToRename=[Collection|EString] 'as' newName=EString
;






/**************************************************************************************
 ************** ENUMERATIONS **********************************************************
 *************************************************************************************/

enum Cardinality returns Cardinality:
				zero_one = '0..1' | one = '1' | zero_many = '0..*' | one_many = '*';
				
				
				
enum NlpTaskType returns NlpTaskType:
		ParagraphSegmentation = 'ParagraphSegmentation' |
		SentenceSegmentation = 'SentenceSegmentation' |
		Tokenisation = 'Tokenisation' |
		PhraseExtractor = 'PhraseExtractor' |
		NGramExtractor = 'NGramExtractor' |
		POSTagging = 'POSTagging' |
		Lemmatisation = 'Lemmatisation' |
		Stemming = 'Stemming' |
		DependencyParsing = 'DependencyParsing' |
		Chunking = 'Chunking' |
		SentimentAnalysis = 'SentimentAnalysis' |
		TextClassification = 'TextClassification' |
		TopicModelling = 'TopicModelling' |
		TermExtraction = 'TermExtraction' |
		NamedEntityRecognition = 'NamedEntityRecognition' |
		RelationExtraction = 'RelationExtraction' |
		CoreferenceResolution = 'CoreferenceResolution'	
;

