grammar it.univaq.disim.typhon.TyphonML with org.eclipse.xtext.common.Terminals

//import "http://org.typhon.dsls.typhonml.sirius" 
import "platform:/resource/it.univaq.disim.typhonml/model/typhonml.ecore"
import "http://www.eclipse.org/emf/2002/Ecore" as ecore


Model returns Model:
	{Model}
		(dataTypes+=DataType)*
		(databases+=Database)*
		('changeOperators' '['(changeOperators+=ChangeOperator)("," changeOperators+=ChangeOperator)*']')?
		;  

DataType returns DataType:
	PrimitiveDataType_Impl | CustomDataType | Entity_Impl;

ChangeOperator returns ChangeOperator:
	AddEntity | 
	RemoveEntity | 
	RenameEntity |
	MigrateEntity |
	SplitEntityVertical |
	SplitEntityHorizontal |
	MergeEntity |
	AddAttribute |
	AddRelation | 
	RenameAttribute | 
	RenameRelation | 
	RemoveAttribute | 
	RemoveRelation | 
	ChangeRelationContainement| 
	ChangeRelationCardinality |
	ChangeAttributeType |
	AddIndexTable |
	DropIndexTable |
	RenameTable |
	AddAttributesToIndex |
	RemoveAttributesToIndex |
	RenameCollection 
//	AddCollectionIndex |
//	DropCollectionIndex
;

//DropCollectionIndex returns DropCollectionIndex:;

/* 
AddCollectionIndex:
	
;
*/

RenameCollection returns RenameCollection:
	'rename' 'collection' collectionToRename=[Collection|EString] 'as' newName=EString
;

AddAttributesToIndex returns AddAttributesToIndex:
	'extends' 'tableindex' table=[Table|EString] '{'
		attributes+=[Attribute|EString] ( "," attributes+=[Attribute|EString])?
	'}';
	
RemoveAttributesToIndex returns RemoveAttributesToIndex:
	'reduce' 'tableindex' table=[Table|EString] '{'
		attributes+=[Attribute|EString] ( "," attributes+=[Attribute|EString])? 
	'}';

RenameTable returns RenameTable:
	'rename' 'table' tableToRename=[Table|EString] 'as' newName=EString
	;

DropIndexTable returns DropIndex:
	'drop' 'tableindex' table=[Table|EString]
	;

AddIndexTable returns AddIndex:
	'create' 'tableindex' table=[Table|EString] '{'
		attributes+=[Attribute|EString] ( "," attributes+=[Attribute|EString])?
	'}'	
;


ChangeAttributeType returns ChangeAttributeType:
	'change' 'attribute' attributeToChange=[Attribute|EString] 'type' newType=[DataType|EString];

MigrateEntity returns MigrateEntity:
	'migrate' entity=[Entity|EString] 'to' newDatabase=[Database|EString]
;

SplitEntityVertical returns SplitEntityVertical:
	'split' 'entity' 'vertical' entity1=[Entity|EString] 'to' entity2name=EString
	'attributes:' '['
		(attributeList+=[Attribute|EString] (',' attributeList+=[Attribute|EString])*)*	
	']'
;

SplitEntityHorizontal returns SplitEntityHorizontal:
	'split' 'entity' 'horizontal' entity1=[Entity|EString] 'to' entity2name=EString 'where'attribute=[Attribute|EString] 'value' expression=STRING
;

MergeEntity returns MergeEntity:
	'merge' 'entities' firstEntityToMerge=[Entity|EString] secondEntityToMerge=[Entity|EString] 'as' newEntityName=EString
;

RenameAttribute returns RenameAttribute :
	'rename' 'attribute' attributeToRename=[Attribute|EString] 'as' newName=EString  
;

RenameEntity returns RenameEntity :
	'rename' 'entity' entityToRename=[Entity|EString] 'as' newEntityName=EString  
;
RenameRelation returns RenameRelation:
	'rename' 'relation' relationToRename=[Relation|EString] 'as' newRelationName=EString
;

RemoveAttribute returns RemoveAttribute :
	'remove' 'attribute' attributeToRemove=[Attribute|EString]  
;

RemoveEntity returns RemoveEntity :
	'remove' 'entity' entityToRemove=[Entity|EString]  
;

RemoveRelation returns RemoveRelation:
	'remove' 'relation' relationToRemove=[Relation|EString]
;

ChangeRelationContainement returns ChangeRelationContainement :
	'change' 'containment' relation=[Relation|EString] 'as' newContainment=EBooleanObject 
;

ChangeRelationCardinality returns ChangeRelationCardinality:
	'change' 'cardinality' relation=[Relation|EString] 'as' newCardinality=Cardinality
;


Attribute returns Attribute:
	Attribute_Impl;

Relation returns Relation:
	Relation_Impl;



//Entity returns Entity:
//	Entity_Impl | AddEntity;

Database returns Database:
	RelationalDB | DocumentDB | KeyValueDB | GraphDB | ColumnDB;

GraphAttribute returns GraphAttribute:
	GraphAttribute_Impl | AddGraphAttribute;

GraphEdge returns GraphEdge:
	GraphEdge_Impl | AddGraphEdge;

EString returns ecore::EString:
	STRING | ID;

PrimitiveDataType_Impl returns PrimitiveDataType:
	{PrimitiveDataType}
	('importedNamespace' importedNamespace=EString)?
	'datatype' name=EString
	;

DataTypeItem returns DataTypeItem:
	('importedNamespace' importedNamespace=EString)?
	name=EString ':' type=[DataType|EString] '[' implementation=DataTypeImplementationPackage ']'
	;

DataTypeImplementationPackage returns DataTypeImplementationPackage:
	{DataTypeImplementationPackage}
	location=EString
	;

FreeText returns FreeText:
	{FreeText}
	'freetext' name=EString '[' (tasks+=NlpTask ( "," tasks+=NlpTask)* ']' )?
	;

NlpTask:
	type=NlpTaskType
	;

CustomDataType returns CustomDataType:
	{CustomDataType}
	('importedNamespace' importedNamespace=EString)?
	'customdatatype' name=EString '{'
		('elements' '{' elements+=DataTypeItem ( "," elements+=DataTypeItem)* '}' )?
	'}';

Entity_Impl returns Entity:
	('importedNamespace' importedNamespace=EString)?
	'entity' name=EString '{'
		(attributes+=Attribute (attributes+=Attribute)*)?
		(fretextAttributes+=FreeText (fretextAttributes+=FreeText)*)?
		(relations+=Relation (relations+=Relation)*)?
	'}';
	

Relation_Impl returns Relation:
	('importedNamespace' importedNamespace=EString)?
	name=EString
	(isContainment?=':')?
	'->'
		(type=[Entity|EString])
		('.' opposite=[Relation|EString])?
		('[' cardinality=Cardinality ']')?
	;


enum Cardinality returns Cardinality:
				zero_one = '0..1' | one = '1' | zero_many = '0..*' | one_many = '*';
				
enum NlpTaskType returns NlpTaskType:
		ParagraphSegmentation = 'ParagraphSegmentation' |
		SentenceSegmentation = 'SentenceSegmentation' |
		Tokenisation = 'Tokenisation' |
		PhraseExtractor = 'PhraseExtractor' |
		NGramExtractor = 'NGramExtractor' |
		POSTagging = 'POSTagging' |
		Lemmatisation = 'Lemmatisation' |
		Stemming = 'Stemming' |
		DependencyParsing = 'DependencyParsing' |
		Chunking = 'Chunking' |
		SentimentAnalysis = 'SentimentAnalysis' |
		TextClassification = 'TextClassification' |
		TopicModelling = 'TopicModelling' |
		TermExtraction = 'TermExtraction' |
		NamedEntityRecognition = 'NamedEntityRecognition' |
		RelationExtraction = 'RelationExtraction' |
		EventExtraction = 'EventExtraction' |
		CoreferenceResolution = 'CoreferenceResolution'	
;

EBooleanObject returns ecore::EBooleanObject:
	'true' | 'false';

Table returns Table:
	('importedNamespace' importedNamespace=EString)?
	'table'
	'{'
		name=EString ':' entity=[Entity|EString]?
		('db' db=[Database|EString])?
		(indexSpec=IndexSpec)?
		(idSpec=IdSpec)?
	'}';

Collection returns Collection:
	('importedNamespace' importedNamespace=EString)?
	name=EString ':' entity=[Entity|EString]
	;

KeyValueElement returns KeyValueElement:
	('importedNamespace' importedNamespace=EString)?
	name=EString '{' key=EString '->' '('	
	( values+=[Attribute|EString]  ( "," values+=[Attribute|EString] )*)?
	')'
//		'entity' entity=[Entity|EString]
//		('values' '(' values+=[DataType|EString] ( "," values+=[DataType|EString])* ')' )?
	'}';

GraphNode returns GraphNode:
	('importedNamespace' importedNamespace=EString)?
	'node' name=EString '!' entity=[Entity|EString]
		('{' attributes+=GraphAttribute ( "," attributes+=GraphAttribute)* '}' )?
	'}';

Column returns Column:
	('importedNamespace' importedNamespace=EString)?
	'column' name=EString '{'
		'entity' entity=[Entity|EString]
		('attributes' '(' attributes+=[Attribute|EString] ( "," attributes+=[Attribute|EString])* ')' )?
	'}';

IndexSpec returns IndexSpec:
	{IndexSpec}
	('importedNamespace' importedNamespace=EString)?
	'index' name=EString '{'
		('attributes' '(' attributes+=[Attribute|EString] ( "," attributes+=[Attribute|EString])* ')' )?
		('references' '(' references+=[Relation|EString] ( "," references+=[Relation|EString])* ')' )?
	'}';

IdSpec returns IdSpec:
	{IdSpec}
	'idSpec' ('(' attributes+=[Attribute|EString] ( "," attributes+=[Attribute|EString])* ')' )?
	;

RelationalDB returns RelationalDB:
	{RelationalDB}
	('importedNamespace' importedNamespace=EString)?
	'relationaldb' name=EString '{'
		('tables' '{' tables+=Table (tables+=Table)* '}' )?
	'}';

DocumentDB returns DocumentDB:
	{DocumentDB}
	('importedNamespace' importedNamespace=EString)?
	'documentdb' name=EString '{'
		('collections' '{' collections+=Collection ( collections+=Collection)* '}' )?
	'}';

KeyValueDB returns KeyValueDB:
	{KeyValueDB}
	('importedNamespace' importedNamespace=EString)?
	'keyvaluedb' name=EString '{'
		('elements' '{' elements+=KeyValueElement ( "," elements+=KeyValueElement)* '}' )?
	'}';

GraphDB returns GraphDB:
	{GraphDB}
	('importedNamespace' importedNamespace=EString)?
	'graphdb' name=EString '{'
		('nodes' '{' nodes+=GraphNode ( "," nodes+=GraphNode)* '}' )?
		('edges' '{' edges+=GraphEdge ( "," edges+=GraphEdge)* '}' )?
	'}';

ColumnDB returns ColumnDB:
	{ColumnDB}
	('importedNamespace' importedNamespace=EString)?
	'columndb' name=EString '{'
		('columns' '{' columns+=Column ( "," columns+=Column)* '}' )?
	'}';

GraphEdge_Impl returns GraphEdge:
	{GraphEdge}
	('importedNamespace' importedNamespace=EString)?
	'edge' name=EString '{'
		('from' from=[GraphNode|EString])?
		('to' to=[GraphNode|EString])?
		('labels' '{' labels+=GraphEdgeLabel ( "," labels+=GraphEdgeLabel)* '}' )?
	'}';

GraphEdgeLabel returns GraphEdgeLabel:
	{GraphEdgeLabel}
	('importedNamespace' importedNamespace=EString)?
	name=EString ':' type=[DataType|EString]
	;
	
AddAttribute returns AddAttribute:
	{AddAttribute}
	('importedNamespace' importedNamespace=EString)?
	'add' 'attribute'
	name=EString ':' type=[DataType|EString] 'to' ownerEntity=[Entity|EString]
	;

AddGraphEdge returns AddGraphEdge:
	{AddGraphEdge}
	('importedNamespace' importedNamespace=EString)?
	'AddGraphEdge'
	name=EString '{'
		('from' from=[GraphNode|EString])?
		('to' to=[GraphNode|EString])?
		('labels' '{' labels+=GraphEdgeLabel ( "," labels+=GraphEdgeLabel)* '}' )?
	'}';

GraphAttribute_Impl returns GraphAttribute:
	{GraphAttribute}
	('importedNamespace' importedNamespace=EString)?
	name=EString '=' value=[Attribute|EString]?
	;

AddGraphAttribute returns AddGraphAttribute:
	{AddGraphAttribute}
	('importedNamespace' importedNamespace=EString)?
	'AddGraphAttribute'
	name=EString '{'
		('value' value=[Attribute|EString])?
	'}';

AddEntity returns AddEntity:
	('importedNamespace' importedNamespace=EString)?
	'add' 'entity'
	name=EString
	'{'
		('attributes' '[' 
			(attributes+=AddAttribute ( ',' attributes+=AddAttribute)*)*
			']')?
		('relations' '[' 
			(relations+=AddRelation (',' relations+=AddRelation)*)*
			']')?
	'}';

Attribute_Impl returns Attribute:
	{Attribute}
	('importedNamespace' importedNamespace=EString)?
	name=EString ':' type=[DataType|EString]
	;

AddRelation returns AddRelation:
	('importedNamespace' importedNamespace=EString)?
	'add' 'relation' 
	name=EString 'to' ownerEntity=[Entity|EString]
	(isContainment?=':')?
	'->'
	(type=[Entity|EString])
	('.' opposite=[Relation|EString])?
	('[' cardinality=Cardinality ']')?		
	;
