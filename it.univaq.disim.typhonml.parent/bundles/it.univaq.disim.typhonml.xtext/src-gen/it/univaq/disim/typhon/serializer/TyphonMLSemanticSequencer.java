/*
 * generated by Xtext 2.19.0
 */
package it.univaq.disim.typhon.serializer;

import com.google.inject.Inject;
import it.univaq.disim.typhon.services.TyphonMLGrammarAccess;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import typhonml.AddAttribute;
import typhonml.AddAttributesToIndex;
import typhonml.AddEntity;
import typhonml.AddGraphAttribute;
import typhonml.AddGraphEdge;
import typhonml.AddIndex;
import typhonml.AddRelation;
import typhonml.Attribute;
import typhonml.ChangeAttributeType;
import typhonml.ChangeRelationCardinality;
import typhonml.ChangeRelationContainement;
import typhonml.Collection;
import typhonml.Column;
import typhonml.ColumnDB;
import typhonml.CustomDataType;
import typhonml.DataTypeImplementationPackage;
import typhonml.DataTypeItem;
import typhonml.DocumentDB;
import typhonml.DropIndex;
import typhonml.Entity;
import typhonml.FreeText;
import typhonml.GraphAttribute;
import typhonml.GraphDB;
import typhonml.GraphEdge;
import typhonml.GraphEdgeLabel;
import typhonml.GraphNode;
import typhonml.IdSpec;
import typhonml.IndexSpec;
import typhonml.KeyValueDB;
import typhonml.KeyValueElement;
import typhonml.MergeEntity;
import typhonml.MigrateEntity;
import typhonml.Model;
import typhonml.NlpTask;
import typhonml.PrimitiveDataType;
import typhonml.Relation;
import typhonml.RelationalDB;
import typhonml.RemoveAttribute;
import typhonml.RemoveAttributesToIndex;
import typhonml.RemoveEntity;
import typhonml.RemoveRelation;
import typhonml.RenameAttribute;
import typhonml.RenameCollection;
import typhonml.RenameEntity;
import typhonml.RenameRelation;
import typhonml.RenameTable;
import typhonml.SplitEntityHorizontal;
import typhonml.SplitEntityVertical;
import typhonml.Table;
import typhonml.TyphonmlPackage;

@SuppressWarnings("all")
public class TyphonMLSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private TyphonMLGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == TyphonmlPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case TyphonmlPackage.ADD_ATTRIBUTE:
				sequence_AddAttribute(context, (AddAttribute) semanticObject); 
				return; 
			case TyphonmlPackage.ADD_ATTRIBUTES_TO_INDEX:
				sequence_AddAttributesToIndex(context, (AddAttributesToIndex) semanticObject); 
				return; 
			case TyphonmlPackage.ADD_ENTITY:
				sequence_AddEntity(context, (AddEntity) semanticObject); 
				return; 
			case TyphonmlPackage.ADD_GRAPH_ATTRIBUTE:
				sequence_AddGraphAttribute(context, (AddGraphAttribute) semanticObject); 
				return; 
			case TyphonmlPackage.ADD_GRAPH_EDGE:
				sequence_AddGraphEdge(context, (AddGraphEdge) semanticObject); 
				return; 
			case TyphonmlPackage.ADD_INDEX:
				sequence_AddIndexTable(context, (AddIndex) semanticObject); 
				return; 
			case TyphonmlPackage.ADD_RELATION:
				sequence_AddRelation(context, (AddRelation) semanticObject); 
				return; 
			case TyphonmlPackage.ATTRIBUTE:
				sequence_Attribute_Impl(context, (Attribute) semanticObject); 
				return; 
			case TyphonmlPackage.CHANGE_ATTRIBUTE_TYPE:
				sequence_ChangeAttributeType(context, (ChangeAttributeType) semanticObject); 
				return; 
			case TyphonmlPackage.CHANGE_RELATION_CARDINALITY:
				sequence_ChangeRelationCardinality(context, (ChangeRelationCardinality) semanticObject); 
				return; 
			case TyphonmlPackage.CHANGE_RELATION_CONTAINEMENT:
				sequence_ChangeRelationContainement(context, (ChangeRelationContainement) semanticObject); 
				return; 
			case TyphonmlPackage.COLLECTION:
				sequence_Collection(context, (Collection) semanticObject); 
				return; 
			case TyphonmlPackage.COLUMN:
				sequence_Column(context, (Column) semanticObject); 
				return; 
			case TyphonmlPackage.COLUMN_DB:
				sequence_ColumnDB(context, (ColumnDB) semanticObject); 
				return; 
			case TyphonmlPackage.CUSTOM_DATA_TYPE:
				sequence_CustomDataType(context, (CustomDataType) semanticObject); 
				return; 
			case TyphonmlPackage.DATA_TYPE_IMPLEMENTATION_PACKAGE:
				sequence_DataTypeImplementationPackage(context, (DataTypeImplementationPackage) semanticObject); 
				return; 
			case TyphonmlPackage.DATA_TYPE_ITEM:
				sequence_DataTypeItem(context, (DataTypeItem) semanticObject); 
				return; 
			case TyphonmlPackage.DOCUMENT_DB:
				sequence_DocumentDB(context, (DocumentDB) semanticObject); 
				return; 
			case TyphonmlPackage.DROP_INDEX:
				sequence_DropIndexTable(context, (DropIndex) semanticObject); 
				return; 
			case TyphonmlPackage.ENTITY:
				sequence_Entity_Impl(context, (Entity) semanticObject); 
				return; 
			case TyphonmlPackage.FREE_TEXT:
				sequence_FreeText(context, (FreeText) semanticObject); 
				return; 
			case TyphonmlPackage.GRAPH_ATTRIBUTE:
				sequence_GraphAttribute_Impl(context, (GraphAttribute) semanticObject); 
				return; 
			case TyphonmlPackage.GRAPH_DB:
				sequence_GraphDB(context, (GraphDB) semanticObject); 
				return; 
			case TyphonmlPackage.GRAPH_EDGE:
				sequence_GraphEdge_Impl(context, (GraphEdge) semanticObject); 
				return; 
			case TyphonmlPackage.GRAPH_EDGE_LABEL:
				sequence_GraphEdgeLabel(context, (GraphEdgeLabel) semanticObject); 
				return; 
			case TyphonmlPackage.GRAPH_NODE:
				sequence_GraphNode(context, (GraphNode) semanticObject); 
				return; 
			case TyphonmlPackage.ID_SPEC:
				sequence_IdSpec(context, (IdSpec) semanticObject); 
				return; 
			case TyphonmlPackage.INDEX_SPEC:
				sequence_IndexSpec(context, (IndexSpec) semanticObject); 
				return; 
			case TyphonmlPackage.KEY_VALUE_DB:
				sequence_KeyValueDB(context, (KeyValueDB) semanticObject); 
				return; 
			case TyphonmlPackage.KEY_VALUE_ELEMENT:
				sequence_KeyValueElement(context, (KeyValueElement) semanticObject); 
				return; 
			case TyphonmlPackage.MERGE_ENTITY:
				sequence_MergeEntity(context, (MergeEntity) semanticObject); 
				return; 
			case TyphonmlPackage.MIGRATE_ENTITY:
				sequence_MigrateEntity(context, (MigrateEntity) semanticObject); 
				return; 
			case TyphonmlPackage.MODEL:
				sequence_Model(context, (Model) semanticObject); 
				return; 
			case TyphonmlPackage.NLP_TASK:
				sequence_NlpTask(context, (NlpTask) semanticObject); 
				return; 
			case TyphonmlPackage.PRIMITIVE_DATA_TYPE:
				sequence_PrimitiveDataType_Impl(context, (PrimitiveDataType) semanticObject); 
				return; 
			case TyphonmlPackage.RELATION:
				sequence_Relation_Impl(context, (Relation) semanticObject); 
				return; 
			case TyphonmlPackage.RELATIONAL_DB:
				sequence_RelationalDB(context, (RelationalDB) semanticObject); 
				return; 
			case TyphonmlPackage.REMOVE_ATTRIBUTE:
				sequence_RemoveAttribute(context, (RemoveAttribute) semanticObject); 
				return; 
			case TyphonmlPackage.REMOVE_ATTRIBUTES_TO_INDEX:
				sequence_RemoveAttributesToIndex(context, (RemoveAttributesToIndex) semanticObject); 
				return; 
			case TyphonmlPackage.REMOVE_ENTITY:
				sequence_RemoveEntity(context, (RemoveEntity) semanticObject); 
				return; 
			case TyphonmlPackage.REMOVE_RELATION:
				sequence_RemoveRelation(context, (RemoveRelation) semanticObject); 
				return; 
			case TyphonmlPackage.RENAME_ATTRIBUTE:
				sequence_RenameAttribute(context, (RenameAttribute) semanticObject); 
				return; 
			case TyphonmlPackage.RENAME_COLLECTION:
				sequence_RenameCollection(context, (RenameCollection) semanticObject); 
				return; 
			case TyphonmlPackage.RENAME_ENTITY:
				sequence_RenameEntity(context, (RenameEntity) semanticObject); 
				return; 
			case TyphonmlPackage.RENAME_RELATION:
				sequence_RenameRelation(context, (RenameRelation) semanticObject); 
				return; 
			case TyphonmlPackage.RENAME_TABLE:
				sequence_RenameTable(context, (RenameTable) semanticObject); 
				return; 
			case TyphonmlPackage.SPLIT_ENTITY_HORIZONTAL:
				sequence_SplitEntityHorizontal(context, (SplitEntityHorizontal) semanticObject); 
				return; 
			case TyphonmlPackage.SPLIT_ENTITY_VERTICAL:
				sequence_SplitEntityVertical(context, (SplitEntityVertical) semanticObject); 
				return; 
			case TyphonmlPackage.TABLE:
				sequence_Table(context, (Table) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     ChangeOperator returns AddAttribute
	 *     AddAttribute returns AddAttribute
	 *
	 * Constraint:
	 *     (importedNamespace=EString? name=EString type=[DataType|EString] ownerEntity=[Entity|EString])
	 */
	protected void sequence_AddAttribute(ISerializationContext context, AddAttribute semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ChangeOperator returns AddAttributesToIndex
	 *     AddAttributesToIndex returns AddAttributesToIndex
	 *
	 * Constraint:
	 *     (table=[Table|EString] attributes+=[Attribute|EString] attributes+=[Attribute|EString]?)
	 */
	protected void sequence_AddAttributesToIndex(ISerializationContext context, AddAttributesToIndex semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ChangeOperator returns AddEntity
	 *     AddEntity returns AddEntity
	 *
	 * Constraint:
	 *     (importedNamespace=EString? name=EString (attributes+=AddAttribute attributes+=AddAttribute*)* (relations+=AddRelation relations+=AddRelation*)*)
	 */
	protected void sequence_AddEntity(ISerializationContext context, AddEntity semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     GraphAttribute returns AddGraphAttribute
	 *     AddGraphAttribute returns AddGraphAttribute
	 *
	 * Constraint:
	 *     (importedNamespace=EString? name=EString value=[Attribute|EString]?)
	 */
	protected void sequence_AddGraphAttribute(ISerializationContext context, AddGraphAttribute semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     GraphEdge returns AddGraphEdge
	 *     AddGraphEdge returns AddGraphEdge
	 *
	 * Constraint:
	 *     (importedNamespace=EString? name=EString from=[GraphNode|EString]? to=[GraphNode|EString]? (labels+=GraphEdgeLabel labels+=GraphEdgeLabel*)?)
	 */
	protected void sequence_AddGraphEdge(ISerializationContext context, AddGraphEdge semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ChangeOperator returns AddIndex
	 *     AddIndexTable returns AddIndex
	 *
	 * Constraint:
	 *     (table=[Table|EString] attributes+=[Attribute|EString] attributes+=[Attribute|EString]?)
	 */
	protected void sequence_AddIndexTable(ISerializationContext context, AddIndex semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ChangeOperator returns AddRelation
	 *     AddRelation returns AddRelation
	 *
	 * Constraint:
	 *     (
	 *         importedNamespace=EString? 
	 *         name=EString 
	 *         ownerEntity=[Entity|EString] 
	 *         isContainment?=':'? 
	 *         type=[Entity|EString] 
	 *         opposite=[Relation|EString]? 
	 *         cardinality=Cardinality?
	 *     )
	 */
	protected void sequence_AddRelation(ISerializationContext context, AddRelation semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Attribute returns Attribute
	 *     Attribute_Impl returns Attribute
	 *
	 * Constraint:
	 *     (importedNamespace=EString? name=EString type=[DataType|EString])
	 */
	protected void sequence_Attribute_Impl(ISerializationContext context, Attribute semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ChangeOperator returns ChangeAttributeType
	 *     ChangeAttributeType returns ChangeAttributeType
	 *
	 * Constraint:
	 *     (attributeToChange=[Attribute|EString] newType=[DataType|EString])
	 */
	protected void sequence_ChangeAttributeType(ISerializationContext context, ChangeAttributeType semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, TyphonmlPackage.Literals.CHANGE_ATTRIBUTE_TYPE__ATTRIBUTE_TO_CHANGE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TyphonmlPackage.Literals.CHANGE_ATTRIBUTE_TYPE__ATTRIBUTE_TO_CHANGE));
			if (transientValues.isValueTransient(semanticObject, TyphonmlPackage.Literals.CHANGE_ATTRIBUTE_TYPE__NEW_TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TyphonmlPackage.Literals.CHANGE_ATTRIBUTE_TYPE__NEW_TYPE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getChangeAttributeTypeAccess().getAttributeToChangeAttributeEStringParserRuleCall_2_0_1(), semanticObject.eGet(TyphonmlPackage.Literals.CHANGE_ATTRIBUTE_TYPE__ATTRIBUTE_TO_CHANGE, false));
		feeder.accept(grammarAccess.getChangeAttributeTypeAccess().getNewTypeDataTypeEStringParserRuleCall_4_0_1(), semanticObject.eGet(TyphonmlPackage.Literals.CHANGE_ATTRIBUTE_TYPE__NEW_TYPE, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ChangeOperator returns ChangeRelationCardinality
	 *     ChangeRelationCardinality returns ChangeRelationCardinality
	 *
	 * Constraint:
	 *     (relation=[Relation|EString] newCardinality=Cardinality)
	 */
	protected void sequence_ChangeRelationCardinality(ISerializationContext context, ChangeRelationCardinality semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, TyphonmlPackage.Literals.CHANGE_RELATION_CARDINALITY__RELATION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TyphonmlPackage.Literals.CHANGE_RELATION_CARDINALITY__RELATION));
			if (transientValues.isValueTransient(semanticObject, TyphonmlPackage.Literals.CHANGE_RELATION_CARDINALITY__NEW_CARDINALITY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TyphonmlPackage.Literals.CHANGE_RELATION_CARDINALITY__NEW_CARDINALITY));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getChangeRelationCardinalityAccess().getRelationRelationEStringParserRuleCall_2_0_1(), semanticObject.eGet(TyphonmlPackage.Literals.CHANGE_RELATION_CARDINALITY__RELATION, false));
		feeder.accept(grammarAccess.getChangeRelationCardinalityAccess().getNewCardinalityCardinalityEnumRuleCall_4_0(), semanticObject.getNewCardinality());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ChangeOperator returns ChangeRelationContainement
	 *     ChangeRelationContainement returns ChangeRelationContainement
	 *
	 * Constraint:
	 *     (relation=[Relation|EString] newContainment=EBooleanObject)
	 */
	protected void sequence_ChangeRelationContainement(ISerializationContext context, ChangeRelationContainement semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, TyphonmlPackage.Literals.CHANGE_RELATION_CONTAINEMENT__RELATION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TyphonmlPackage.Literals.CHANGE_RELATION_CONTAINEMENT__RELATION));
			if (transientValues.isValueTransient(semanticObject, TyphonmlPackage.Literals.CHANGE_RELATION_CONTAINEMENT__NEW_CONTAINMENT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TyphonmlPackage.Literals.CHANGE_RELATION_CONTAINEMENT__NEW_CONTAINMENT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getChangeRelationContainementAccess().getRelationRelationEStringParserRuleCall_2_0_1(), semanticObject.eGet(TyphonmlPackage.Literals.CHANGE_RELATION_CONTAINEMENT__RELATION, false));
		feeder.accept(grammarAccess.getChangeRelationContainementAccess().getNewContainmentEBooleanObjectParserRuleCall_4_0(), semanticObject.getNewContainment());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Collection returns Collection
	 *
	 * Constraint:
	 *     (importedNamespace=EString? name=EString entity=[Entity|EString])
	 */
	protected void sequence_Collection(ISerializationContext context, Collection semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Database returns ColumnDB
	 *     ColumnDB returns ColumnDB
	 *
	 * Constraint:
	 *     (importedNamespace=EString? name=EString (columns+=Column columns+=Column*)?)
	 */
	protected void sequence_ColumnDB(ISerializationContext context, ColumnDB semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Column returns Column
	 *
	 * Constraint:
	 *     (importedNamespace=EString? name=EString entity=[Entity|EString] (attributes+=[Attribute|EString] attributes+=[Attribute|EString]*)?)
	 */
	protected void sequence_Column(ISerializationContext context, Column semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DataType returns CustomDataType
	 *     CustomDataType returns CustomDataType
	 *
	 * Constraint:
	 *     (importedNamespace=EString? name=EString (elements+=DataTypeItem elements+=DataTypeItem*)?)
	 */
	protected void sequence_CustomDataType(ISerializationContext context, CustomDataType semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DataTypeImplementationPackage returns DataTypeImplementationPackage
	 *
	 * Constraint:
	 *     location=EString
	 */
	protected void sequence_DataTypeImplementationPackage(ISerializationContext context, DataTypeImplementationPackage semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, TyphonmlPackage.Literals.DATA_TYPE_IMPLEMENTATION_PACKAGE__LOCATION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TyphonmlPackage.Literals.DATA_TYPE_IMPLEMENTATION_PACKAGE__LOCATION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDataTypeImplementationPackageAccess().getLocationEStringParserRuleCall_1_0(), semanticObject.getLocation());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     DataTypeItem returns DataTypeItem
	 *
	 * Constraint:
	 *     (importedNamespace=EString? name=EString type=[DataType|EString] implementation=DataTypeImplementationPackage)
	 */
	protected void sequence_DataTypeItem(ISerializationContext context, DataTypeItem semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Database returns DocumentDB
	 *     DocumentDB returns DocumentDB
	 *
	 * Constraint:
	 *     (importedNamespace=EString? name=EString (collections+=Collection collections+=Collection*)?)
	 */
	protected void sequence_DocumentDB(ISerializationContext context, DocumentDB semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ChangeOperator returns DropIndex
	 *     DropIndexTable returns DropIndex
	 *
	 * Constraint:
	 *     table=[Table|EString]
	 */
	protected void sequence_DropIndexTable(ISerializationContext context, DropIndex semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, TyphonmlPackage.Literals.DROP_INDEX__TABLE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TyphonmlPackage.Literals.DROP_INDEX__TABLE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDropIndexTableAccess().getTableTableEStringParserRuleCall_2_0_1(), semanticObject.eGet(TyphonmlPackage.Literals.DROP_INDEX__TABLE, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     DataType returns Entity
	 *     Entity_Impl returns Entity
	 *
	 * Constraint:
	 *     (
	 *         importedNamespace=EString? 
	 *         name=EString 
	 *         (attributes+=Attribute attributes+=Attribute*)? 
	 *         (fretextAttributes+=FreeText fretextAttributes+=FreeText*)? 
	 *         (relations+=Relation relations+=Relation*)?
	 *     )
	 */
	protected void sequence_Entity_Impl(ISerializationContext context, Entity semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     FreeText returns FreeText
	 *
	 * Constraint:
	 *     (name=EString (tasks+=NlpTask tasks+=NlpTask*)?)
	 */
	protected void sequence_FreeText(ISerializationContext context, FreeText semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     GraphAttribute returns GraphAttribute
	 *     GraphAttribute_Impl returns GraphAttribute
	 *
	 * Constraint:
	 *     (importedNamespace=EString? name=EString value=[Attribute|EString]?)
	 */
	protected void sequence_GraphAttribute_Impl(ISerializationContext context, GraphAttribute semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Database returns GraphDB
	 *     GraphDB returns GraphDB
	 *
	 * Constraint:
	 *     (importedNamespace=EString? name=EString (nodes+=GraphNode nodes+=GraphNode*)? (edges+=GraphEdge edges+=GraphEdge*)?)
	 */
	protected void sequence_GraphDB(ISerializationContext context, GraphDB semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     GraphEdgeLabel returns GraphEdgeLabel
	 *
	 * Constraint:
	 *     (importedNamespace=EString? name=EString type=[DataType|EString])
	 */
	protected void sequence_GraphEdgeLabel(ISerializationContext context, GraphEdgeLabel semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     GraphEdge returns GraphEdge
	 *     GraphEdge_Impl returns GraphEdge
	 *
	 * Constraint:
	 *     (importedNamespace=EString? name=EString from=[GraphNode|EString]? to=[GraphNode|EString]? (labels+=GraphEdgeLabel labels+=GraphEdgeLabel*)?)
	 */
	protected void sequence_GraphEdge_Impl(ISerializationContext context, GraphEdge semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     GraphNode returns GraphNode
	 *
	 * Constraint:
	 *     (importedNamespace=EString? name=EString entity=[Entity|EString] (attributes+=GraphAttribute attributes+=GraphAttribute*)?)
	 */
	protected void sequence_GraphNode(ISerializationContext context, GraphNode semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     IdSpec returns IdSpec
	 *
	 * Constraint:
	 *     (attributes+=[Attribute|EString] attributes+=[Attribute|EString]*)?
	 */
	protected void sequence_IdSpec(ISerializationContext context, IdSpec semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     IndexSpec returns IndexSpec
	 *
	 * Constraint:
	 *     (
	 *         importedNamespace=EString? 
	 *         name=EString 
	 *         (attributes+=[Attribute|EString] attributes+=[Attribute|EString]*)? 
	 *         (references+=[Relation|EString] references+=[Relation|EString]*)?
	 *     )
	 */
	protected void sequence_IndexSpec(ISerializationContext context, IndexSpec semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Database returns KeyValueDB
	 *     KeyValueDB returns KeyValueDB
	 *
	 * Constraint:
	 *     (importedNamespace=EString? name=EString (elements+=KeyValueElement elements+=KeyValueElement*)?)
	 */
	protected void sequence_KeyValueDB(ISerializationContext context, KeyValueDB semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     KeyValueElement returns KeyValueElement
	 *
	 * Constraint:
	 *     (importedNamespace=EString? name=EString key=EString (values+=[Attribute|EString] values+=[Attribute|EString]*)?)
	 */
	protected void sequence_KeyValueElement(ISerializationContext context, KeyValueElement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ChangeOperator returns MergeEntity
	 *     MergeEntity returns MergeEntity
	 *
	 * Constraint:
	 *     (firstEntityToMerge=[Entity|EString] secondEntityToMerge=[Entity|EString] newEntityName=EString)
	 */
	protected void sequence_MergeEntity(ISerializationContext context, MergeEntity semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, TyphonmlPackage.Literals.MERGE_ENTITY__FIRST_ENTITY_TO_MERGE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TyphonmlPackage.Literals.MERGE_ENTITY__FIRST_ENTITY_TO_MERGE));
			if (transientValues.isValueTransient(semanticObject, TyphonmlPackage.Literals.MERGE_ENTITY__SECOND_ENTITY_TO_MERGE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TyphonmlPackage.Literals.MERGE_ENTITY__SECOND_ENTITY_TO_MERGE));
			if (transientValues.isValueTransient(semanticObject, TyphonmlPackage.Literals.MERGE_ENTITY__NEW_ENTITY_NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TyphonmlPackage.Literals.MERGE_ENTITY__NEW_ENTITY_NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMergeEntityAccess().getFirstEntityToMergeEntityEStringParserRuleCall_2_0_1(), semanticObject.eGet(TyphonmlPackage.Literals.MERGE_ENTITY__FIRST_ENTITY_TO_MERGE, false));
		feeder.accept(grammarAccess.getMergeEntityAccess().getSecondEntityToMergeEntityEStringParserRuleCall_3_0_1(), semanticObject.eGet(TyphonmlPackage.Literals.MERGE_ENTITY__SECOND_ENTITY_TO_MERGE, false));
		feeder.accept(grammarAccess.getMergeEntityAccess().getNewEntityNameEStringParserRuleCall_5_0(), semanticObject.getNewEntityName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ChangeOperator returns MigrateEntity
	 *     MigrateEntity returns MigrateEntity
	 *
	 * Constraint:
	 *     (entity=[Entity|EString] newDatabase=[Database|EString])
	 */
	protected void sequence_MigrateEntity(ISerializationContext context, MigrateEntity semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, TyphonmlPackage.Literals.MIGRATE_ENTITY__ENTITY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TyphonmlPackage.Literals.MIGRATE_ENTITY__ENTITY));
			if (transientValues.isValueTransient(semanticObject, TyphonmlPackage.Literals.MIGRATE_ENTITY__NEW_DATABASE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TyphonmlPackage.Literals.MIGRATE_ENTITY__NEW_DATABASE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMigrateEntityAccess().getEntityEntityEStringParserRuleCall_1_0_1(), semanticObject.eGet(TyphonmlPackage.Literals.MIGRATE_ENTITY__ENTITY, false));
		feeder.accept(grammarAccess.getMigrateEntityAccess().getNewDatabaseDatabaseEStringParserRuleCall_3_0_1(), semanticObject.eGet(TyphonmlPackage.Literals.MIGRATE_ENTITY__NEW_DATABASE, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Model returns Model
	 *
	 * Constraint:
	 *     (dataTypes+=DataType* databases+=Database* (changeOperators+=ChangeOperator changeOperators+=ChangeOperator*)?)
	 */
	protected void sequence_Model(ISerializationContext context, Model semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     NlpTask returns NlpTask
	 *
	 * Constraint:
	 *     type=NlpTaskType
	 */
	protected void sequence_NlpTask(ISerializationContext context, NlpTask semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, TyphonmlPackage.Literals.NLP_TASK__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TyphonmlPackage.Literals.NLP_TASK__TYPE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNlpTaskAccess().getTypeNlpTaskTypeEnumRuleCall_0(), semanticObject.getType());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     DataType returns PrimitiveDataType
	 *     PrimitiveDataType_Impl returns PrimitiveDataType
	 *
	 * Constraint:
	 *     (importedNamespace=EString? name=EString)
	 */
	protected void sequence_PrimitiveDataType_Impl(ISerializationContext context, PrimitiveDataType semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Relation returns Relation
	 *     Relation_Impl returns Relation
	 *
	 * Constraint:
	 *     (
	 *         importedNamespace=EString? 
	 *         name=EString 
	 *         isContainment?=':'? 
	 *         type=[Entity|EString] 
	 *         opposite=[Relation|EString]? 
	 *         cardinality=Cardinality?
	 *     )
	 */
	protected void sequence_Relation_Impl(ISerializationContext context, Relation semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Database returns RelationalDB
	 *     RelationalDB returns RelationalDB
	 *
	 * Constraint:
	 *     (importedNamespace=EString? name=EString (tables+=Table tables+=Table*)?)
	 */
	protected void sequence_RelationalDB(ISerializationContext context, RelationalDB semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ChangeOperator returns RemoveAttribute
	 *     RemoveAttribute returns RemoveAttribute
	 *
	 * Constraint:
	 *     attributeToRemove=[Attribute|EString]
	 */
	protected void sequence_RemoveAttribute(ISerializationContext context, RemoveAttribute semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, TyphonmlPackage.Literals.REMOVE_ATTRIBUTE__ATTRIBUTE_TO_REMOVE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TyphonmlPackage.Literals.REMOVE_ATTRIBUTE__ATTRIBUTE_TO_REMOVE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getRemoveAttributeAccess().getAttributeToRemoveAttributeEStringParserRuleCall_2_0_1(), semanticObject.eGet(TyphonmlPackage.Literals.REMOVE_ATTRIBUTE__ATTRIBUTE_TO_REMOVE, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ChangeOperator returns RemoveAttributesToIndex
	 *     RemoveAttributesToIndex returns RemoveAttributesToIndex
	 *
	 * Constraint:
	 *     (table=[Table|EString] attributes+=[Attribute|EString] attributes+=[Attribute|EString]?)
	 */
	protected void sequence_RemoveAttributesToIndex(ISerializationContext context, RemoveAttributesToIndex semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ChangeOperator returns RemoveEntity
	 *     RemoveEntity returns RemoveEntity
	 *
	 * Constraint:
	 *     entityToRemove=[Entity|EString]
	 */
	protected void sequence_RemoveEntity(ISerializationContext context, RemoveEntity semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, TyphonmlPackage.Literals.REMOVE_ENTITY__ENTITY_TO_REMOVE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TyphonmlPackage.Literals.REMOVE_ENTITY__ENTITY_TO_REMOVE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getRemoveEntityAccess().getEntityToRemoveEntityEStringParserRuleCall_2_0_1(), semanticObject.eGet(TyphonmlPackage.Literals.REMOVE_ENTITY__ENTITY_TO_REMOVE, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ChangeOperator returns RemoveRelation
	 *     RemoveRelation returns RemoveRelation
	 *
	 * Constraint:
	 *     relationToRemove=[Relation|EString]
	 */
	protected void sequence_RemoveRelation(ISerializationContext context, RemoveRelation semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, TyphonmlPackage.Literals.REMOVE_RELATION__RELATION_TO_REMOVE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TyphonmlPackage.Literals.REMOVE_RELATION__RELATION_TO_REMOVE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getRemoveRelationAccess().getRelationToRemoveRelationEStringParserRuleCall_2_0_1(), semanticObject.eGet(TyphonmlPackage.Literals.REMOVE_RELATION__RELATION_TO_REMOVE, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ChangeOperator returns RenameAttribute
	 *     RenameAttribute returns RenameAttribute
	 *
	 * Constraint:
	 *     (attributeToRename=[Attribute|EString] newName=EString)
	 */
	protected void sequence_RenameAttribute(ISerializationContext context, RenameAttribute semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, TyphonmlPackage.Literals.RENAME_ATTRIBUTE__ATTRIBUTE_TO_RENAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TyphonmlPackage.Literals.RENAME_ATTRIBUTE__ATTRIBUTE_TO_RENAME));
			if (transientValues.isValueTransient(semanticObject, TyphonmlPackage.Literals.RENAME_ATTRIBUTE__NEW_NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TyphonmlPackage.Literals.RENAME_ATTRIBUTE__NEW_NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getRenameAttributeAccess().getAttributeToRenameAttributeEStringParserRuleCall_2_0_1(), semanticObject.eGet(TyphonmlPackage.Literals.RENAME_ATTRIBUTE__ATTRIBUTE_TO_RENAME, false));
		feeder.accept(grammarAccess.getRenameAttributeAccess().getNewNameEStringParserRuleCall_4_0(), semanticObject.getNewName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ChangeOperator returns RenameCollection
	 *     RenameCollection returns RenameCollection
	 *
	 * Constraint:
	 *     (collectionToRename=[Collection|EString] newName=EString)
	 */
	protected void sequence_RenameCollection(ISerializationContext context, RenameCollection semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, TyphonmlPackage.Literals.RENAME_COLLECTION__COLLECTION_TO_RENAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TyphonmlPackage.Literals.RENAME_COLLECTION__COLLECTION_TO_RENAME));
			if (transientValues.isValueTransient(semanticObject, TyphonmlPackage.Literals.RENAME_COLLECTION__NEW_NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TyphonmlPackage.Literals.RENAME_COLLECTION__NEW_NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getRenameCollectionAccess().getCollectionToRenameCollectionEStringParserRuleCall_2_0_1(), semanticObject.eGet(TyphonmlPackage.Literals.RENAME_COLLECTION__COLLECTION_TO_RENAME, false));
		feeder.accept(grammarAccess.getRenameCollectionAccess().getNewNameEStringParserRuleCall_4_0(), semanticObject.getNewName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ChangeOperator returns RenameEntity
	 *     RenameEntity returns RenameEntity
	 *
	 * Constraint:
	 *     (entityToRename=[Entity|EString] newEntityName=EString)
	 */
	protected void sequence_RenameEntity(ISerializationContext context, RenameEntity semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, TyphonmlPackage.Literals.RENAME_ENTITY__ENTITY_TO_RENAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TyphonmlPackage.Literals.RENAME_ENTITY__ENTITY_TO_RENAME));
			if (transientValues.isValueTransient(semanticObject, TyphonmlPackage.Literals.RENAME_ENTITY__NEW_ENTITY_NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TyphonmlPackage.Literals.RENAME_ENTITY__NEW_ENTITY_NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getRenameEntityAccess().getEntityToRenameEntityEStringParserRuleCall_2_0_1(), semanticObject.eGet(TyphonmlPackage.Literals.RENAME_ENTITY__ENTITY_TO_RENAME, false));
		feeder.accept(grammarAccess.getRenameEntityAccess().getNewEntityNameEStringParserRuleCall_4_0(), semanticObject.getNewEntityName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ChangeOperator returns RenameRelation
	 *     RenameRelation returns RenameRelation
	 *
	 * Constraint:
	 *     (relationToRename=[Relation|EString] newRelationName=EString)
	 */
	protected void sequence_RenameRelation(ISerializationContext context, RenameRelation semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, TyphonmlPackage.Literals.RENAME_RELATION__RELATION_TO_RENAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TyphonmlPackage.Literals.RENAME_RELATION__RELATION_TO_RENAME));
			if (transientValues.isValueTransient(semanticObject, TyphonmlPackage.Literals.RENAME_RELATION__NEW_RELATION_NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TyphonmlPackage.Literals.RENAME_RELATION__NEW_RELATION_NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getRenameRelationAccess().getRelationToRenameRelationEStringParserRuleCall_2_0_1(), semanticObject.eGet(TyphonmlPackage.Literals.RENAME_RELATION__RELATION_TO_RENAME, false));
		feeder.accept(grammarAccess.getRenameRelationAccess().getNewRelationNameEStringParserRuleCall_4_0(), semanticObject.getNewRelationName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ChangeOperator returns RenameTable
	 *     RenameTable returns RenameTable
	 *
	 * Constraint:
	 *     (tableToRename=[Table|EString] newName=EString)
	 */
	protected void sequence_RenameTable(ISerializationContext context, RenameTable semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, TyphonmlPackage.Literals.RENAME_TABLE__TABLE_TO_RENAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TyphonmlPackage.Literals.RENAME_TABLE__TABLE_TO_RENAME));
			if (transientValues.isValueTransient(semanticObject, TyphonmlPackage.Literals.RENAME_TABLE__NEW_NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TyphonmlPackage.Literals.RENAME_TABLE__NEW_NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getRenameTableAccess().getTableToRenameTableEStringParserRuleCall_2_0_1(), semanticObject.eGet(TyphonmlPackage.Literals.RENAME_TABLE__TABLE_TO_RENAME, false));
		feeder.accept(grammarAccess.getRenameTableAccess().getNewNameEStringParserRuleCall_4_0(), semanticObject.getNewName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ChangeOperator returns SplitEntityHorizontal
	 *     SplitEntityHorizontal returns SplitEntityHorizontal
	 *
	 * Constraint:
	 *     (entity1=[Entity|EString] entity2name=EString attribute=[Attribute|EString] expression=STRING)
	 */
	protected void sequence_SplitEntityHorizontal(ISerializationContext context, SplitEntityHorizontal semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, TyphonmlPackage.Literals.SPLIT_ENTITY_HORIZONTAL__ENTITY1) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TyphonmlPackage.Literals.SPLIT_ENTITY_HORIZONTAL__ENTITY1));
			if (transientValues.isValueTransient(semanticObject, TyphonmlPackage.Literals.SPLIT_ENTITY_HORIZONTAL__ENTITY2NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TyphonmlPackage.Literals.SPLIT_ENTITY_HORIZONTAL__ENTITY2NAME));
			if (transientValues.isValueTransient(semanticObject, TyphonmlPackage.Literals.SPLIT_ENTITY_HORIZONTAL__ATTRIBUTE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TyphonmlPackage.Literals.SPLIT_ENTITY_HORIZONTAL__ATTRIBUTE));
			if (transientValues.isValueTransient(semanticObject, TyphonmlPackage.Literals.SPLIT_ENTITY_HORIZONTAL__EXPRESSION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TyphonmlPackage.Literals.SPLIT_ENTITY_HORIZONTAL__EXPRESSION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSplitEntityHorizontalAccess().getEntity1EntityEStringParserRuleCall_3_0_1(), semanticObject.eGet(TyphonmlPackage.Literals.SPLIT_ENTITY_HORIZONTAL__ENTITY1, false));
		feeder.accept(grammarAccess.getSplitEntityHorizontalAccess().getEntity2nameEStringParserRuleCall_5_0(), semanticObject.getEntity2name());
		feeder.accept(grammarAccess.getSplitEntityHorizontalAccess().getAttributeAttributeEStringParserRuleCall_7_0_1(), semanticObject.eGet(TyphonmlPackage.Literals.SPLIT_ENTITY_HORIZONTAL__ATTRIBUTE, false));
		feeder.accept(grammarAccess.getSplitEntityHorizontalAccess().getExpressionSTRINGTerminalRuleCall_9_0(), semanticObject.getExpression());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ChangeOperator returns SplitEntityVertical
	 *     SplitEntityVertical returns SplitEntityVertical
	 *
	 * Constraint:
	 *     (entity1=[Entity|EString] entity2name=EString (attributeList+=[Attribute|EString] attributeList+=[Attribute|EString]*)*)
	 */
	protected void sequence_SplitEntityVertical(ISerializationContext context, SplitEntityVertical semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Table returns Table
	 *
	 * Constraint:
	 *     (
	 *         importedNamespace=EString? 
	 *         name=EString 
	 *         entity=[Entity|EString]? 
	 *         db=[Database|EString]? 
	 *         indexSpec=IndexSpec? 
	 *         idSpec=IdSpec?
	 *     )
	 */
	protected void sequence_Table(ISerializationContext context, Table semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
