/**
 */
package typhonml.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import typhonml.util.TyphonmlAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class TyphonmlItemProviderAdapterFactory extends TyphonmlAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public TyphonmlItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link typhonml.Model} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ModelItemProvider modelItemProvider;

	/**
	 * This creates an adapter for a {@link typhonml.Model}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createModelAdapter() {
		if (modelItemProvider == null) {
			modelItemProvider = new ModelItemProvider(this);
		}

		return modelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link typhonml.AddEntity} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AddEntityItemProvider addEntityItemProvider;

	/**
	 * This creates an adapter for a {@link typhonml.AddEntity}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAddEntityAdapter() {
		if (addEntityItemProvider == null) {
			addEntityItemProvider = new AddEntityItemProvider(this);
		}

		return addEntityItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link typhonml.RemoveEntity} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RemoveEntityItemProvider removeEntityItemProvider;

	/**
	 * This creates an adapter for a {@link typhonml.RemoveEntity}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRemoveEntityAdapter() {
		if (removeEntityItemProvider == null) {
			removeEntityItemProvider = new RemoveEntityItemProvider(this);
		}

		return removeEntityItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link typhonml.SplitEntity} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SplitEntityItemProvider splitEntityItemProvider;

	/**
	 * This creates an adapter for a {@link typhonml.SplitEntity}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSplitEntityAdapter() {
		if (splitEntityItemProvider == null) {
			splitEntityItemProvider = new SplitEntityItemProvider(this);
		}

		return splitEntityItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link typhonml.MigrateEntity} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MigrateEntityItemProvider migrateEntityItemProvider;

	/**
	 * This creates an adapter for a {@link typhonml.MigrateEntity}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMigrateEntityAdapter() {
		if (migrateEntityItemProvider == null) {
			migrateEntityItemProvider = new MigrateEntityItemProvider(this);
		}

		return migrateEntityItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link typhonml.MergeEntity} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MergeEntityItemProvider mergeEntityItemProvider;

	/**
	 * This creates an adapter for a {@link typhonml.MergeEntity}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMergeEntityAdapter() {
		if (mergeEntityItemProvider == null) {
			mergeEntityItemProvider = new MergeEntityItemProvider(this);
		}

		return mergeEntityItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link typhonml.AddRelation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AddRelationItemProvider addRelationItemProvider;

	/**
	 * This creates an adapter for a {@link typhonml.AddRelation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAddRelationAdapter() {
		if (addRelationItemProvider == null) {
			addRelationItemProvider = new AddRelationItemProvider(this);
		}

		return addRelationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link typhonml.RemoveRelation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RemoveRelationItemProvider removeRelationItemProvider;

	/**
	 * This creates an adapter for a {@link typhonml.RemoveRelation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRemoveRelationAdapter() {
		if (removeRelationItemProvider == null) {
			removeRelationItemProvider = new RemoveRelationItemProvider(this);
		}

		return removeRelationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link typhonml.RenameRelation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RenameRelationItemProvider renameRelationItemProvider;

	/**
	 * This creates an adapter for a {@link typhonml.RenameRelation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRenameRelationAdapter() {
		if (renameRelationItemProvider == null) {
			renameRelationItemProvider = new RenameRelationItemProvider(this);
		}

		return renameRelationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link typhonml.EnableRelationContainment} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EnableRelationContainmentItemProvider enableRelationContainmentItemProvider;

	/**
	 * This creates an adapter for a {@link typhonml.EnableRelationContainment}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEnableRelationContainmentAdapter() {
		if (enableRelationContainmentItemProvider == null) {
			enableRelationContainmentItemProvider = new EnableRelationContainmentItemProvider(this);
		}

		return enableRelationContainmentItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link typhonml.DisableRelationContainment} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DisableRelationContainmentItemProvider disableRelationContainmentItemProvider;

	/**
	 * This creates an adapter for a {@link typhonml.DisableRelationContainment}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDisableRelationContainmentAdapter() {
		if (disableRelationContainmentItemProvider == null) {
			disableRelationContainmentItemProvider = new DisableRelationContainmentItemProvider(this);
		}

		return disableRelationContainmentItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link typhonml.EnableBidirectionalRelation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EnableBidirectionalRelationItemProvider enableBidirectionalRelationItemProvider;

	/**
	 * This creates an adapter for a {@link typhonml.EnableBidirectionalRelation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEnableBidirectionalRelationAdapter() {
		if (enableBidirectionalRelationItemProvider == null) {
			enableBidirectionalRelationItemProvider = new EnableBidirectionalRelationItemProvider(this);
		}

		return enableBidirectionalRelationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link typhonml.DisableBidirectionalRelation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DisableBidirectionalRelationItemProvider disableBidirectionalRelationItemProvider;

	/**
	 * This creates an adapter for a {@link typhonml.DisableBidirectionalRelation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDisableBidirectionalRelationAdapter() {
		if (disableBidirectionalRelationItemProvider == null) {
			disableBidirectionalRelationItemProvider = new DisableBidirectionalRelationItemProvider(this);
		}

		return disableBidirectionalRelationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link typhonml.ChangeRelationCardinality} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ChangeRelationCardinalityItemProvider changeRelationCardinalityItemProvider;

	/**
	 * This creates an adapter for a {@link typhonml.ChangeRelationCardinality}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createChangeRelationCardinalityAdapter() {
		if (changeRelationCardinalityItemProvider == null) {
			changeRelationCardinalityItemProvider = new ChangeRelationCardinalityItemProvider(this);
		}

		return changeRelationCardinalityItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link typhonml.AddAttribute} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AddAttributeItemProvider addAttributeItemProvider;

	/**
	 * This creates an adapter for a {@link typhonml.AddAttribute}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAddAttributeAdapter() {
		if (addAttributeItemProvider == null) {
			addAttributeItemProvider = new AddAttributeItemProvider(this);
		}

		return addAttributeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link typhonml.ChangeAttributeType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ChangeAttributeTypeItemProvider changeAttributeTypeItemProvider;

	/**
	 * This creates an adapter for a {@link typhonml.ChangeAttributeType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createChangeAttributeTypeAdapter() {
		if (changeAttributeTypeItemProvider == null) {
			changeAttributeTypeItemProvider = new ChangeAttributeTypeItemProvider(this);
		}

		return changeAttributeTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link typhonml.RemoveAttribute} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RemoveAttributeItemProvider removeAttributeItemProvider;

	/**
	 * This creates an adapter for a {@link typhonml.RemoveAttribute}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRemoveAttributeAdapter() {
		if (removeAttributeItemProvider == null) {
			removeAttributeItemProvider = new RemoveAttributeItemProvider(this);
		}

		return removeAttributeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link typhonml.RenameAttribute} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RenameAttributeItemProvider renameAttributeItemProvider;

	/**
	 * This creates an adapter for a {@link typhonml.RenameAttribute}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRenameAttributeAdapter() {
		if (renameAttributeItemProvider == null) {
			renameAttributeItemProvider = new RenameAttributeItemProvider(this);
		}

		return renameAttributeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link typhonml.RenameTable} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RenameTableItemProvider renameTableItemProvider;

	/**
	 * This creates an adapter for a {@link typhonml.RenameTable}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRenameTableAdapter() {
		if (renameTableItemProvider == null) {
			renameTableItemProvider = new RenameTableItemProvider(this);
		}

		return renameTableItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link typhonml.AddIndex} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AddIndexItemProvider addIndexItemProvider;

	/**
	 * This creates an adapter for a {@link typhonml.AddIndex}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAddIndexAdapter() {
		if (addIndexItemProvider == null) {
			addIndexItemProvider = new AddIndexItemProvider(this);
		}

		return addIndexItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link typhonml.DropIndex} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DropIndexItemProvider dropIndexItemProvider;

	/**
	 * This creates an adapter for a {@link typhonml.DropIndex}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDropIndexAdapter() {
		if (dropIndexItemProvider == null) {
			dropIndexItemProvider = new DropIndexItemProvider(this);
		}

		return dropIndexItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link typhonml.AddAttributesToIndex} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AddAttributesToIndexItemProvider addAttributesToIndexItemProvider;

	/**
	 * This creates an adapter for a {@link typhonml.AddAttributesToIndex}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAddAttributesToIndexAdapter() {
		if (addAttributesToIndexItemProvider == null) {
			addAttributesToIndexItemProvider = new AddAttributesToIndexItemProvider(this);
		}

		return addAttributesToIndexItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link typhonml.RemoveAttributesToIndex} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RemoveAttributesToIndexItemProvider removeAttributesToIndexItemProvider;

	/**
	 * This creates an adapter for a {@link typhonml.RemoveAttributesToIndex}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRemoveAttributesToIndexAdapter() {
		if (removeAttributesToIndexItemProvider == null) {
			removeAttributesToIndexItemProvider = new RemoveAttributesToIndexItemProvider(this);
		}

		return removeAttributesToIndexItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link typhonml.RenameCollection} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RenameCollectionItemProvider renameCollectionItemProvider;

	/**
	 * This creates an adapter for a {@link typhonml.RenameCollection}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRenameCollectionAdapter() {
		if (renameCollectionItemProvider == null) {
			renameCollectionItemProvider = new RenameCollectionItemProvider(this);
		}

		return renameCollectionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link typhonml.AddCollectionIndex} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AddCollectionIndexItemProvider addCollectionIndexItemProvider;

	/**
	 * This creates an adapter for a {@link typhonml.AddCollectionIndex}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAddCollectionIndexAdapter() {
		if (addCollectionIndexItemProvider == null) {
			addCollectionIndexItemProvider = new AddCollectionIndexItemProvider(this);
		}

		return addCollectionIndexItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link typhonml.DropCollectionIndex} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DropCollectionIndexItemProvider dropCollectionIndexItemProvider;

	/**
	 * This creates an adapter for a {@link typhonml.DropCollectionIndex}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDropCollectionIndexAdapter() {
		if (dropCollectionIndexItemProvider == null) {
			dropCollectionIndexItemProvider = new DropCollectionIndexItemProvider(this);
		}

		return dropCollectionIndexItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link typhonml.AddGraphAttribute} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AddGraphAttributeItemProvider addGraphAttributeItemProvider;

	/**
	 * This creates an adapter for a {@link typhonml.AddGraphAttribute}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAddGraphAttributeAdapter() {
		if (addGraphAttributeItemProvider == null) {
			addGraphAttributeItemProvider = new AddGraphAttributeItemProvider(this);
		}

		return addGraphAttributeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link typhonml.RemoveGraphAttribute} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RemoveGraphAttributeItemProvider removeGraphAttributeItemProvider;

	/**
	 * This creates an adapter for a {@link typhonml.RemoveGraphAttribute}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRemoveGraphAttributeAdapter() {
		if (removeGraphAttributeItemProvider == null) {
			removeGraphAttributeItemProvider = new RemoveGraphAttributeItemProvider(this);
		}

		return removeGraphAttributeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link typhonml.AddGraphEdge} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AddGraphEdgeItemProvider addGraphEdgeItemProvider;

	/**
	 * This creates an adapter for a {@link typhonml.AddGraphEdge}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAddGraphEdgeAdapter() {
		if (addGraphEdgeItemProvider == null) {
			addGraphEdgeItemProvider = new AddGraphEdgeItemProvider(this);
		}

		return addGraphEdgeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link typhonml.RemoveGraphEdge} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RemoveGraphEdgeItemProvider removeGraphEdgeItemProvider;

	/**
	 * This creates an adapter for a {@link typhonml.RemoveGraphEdge}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRemoveGraphEdgeAdapter() {
		if (removeGraphEdgeItemProvider == null) {
			removeGraphEdgeItemProvider = new RemoveGraphEdgeItemProvider(this);
		}

		return removeGraphEdgeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link typhonml.RenabeGraphEdgeLabel} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RenabeGraphEdgeLabelItemProvider renabeGraphEdgeLabelItemProvider;

	/**
	 * This creates an adapter for a {@link typhonml.RenabeGraphEdgeLabel}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRenabeGraphEdgeLabelAdapter() {
		if (renabeGraphEdgeLabelItemProvider == null) {
			renabeGraphEdgeLabelItemProvider = new RenabeGraphEdgeLabelItemProvider(this);
		}

		return renabeGraphEdgeLabelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link typhonml.CustomDataType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CustomDataTypeItemProvider customDataTypeItemProvider;

	/**
	 * This creates an adapter for a {@link typhonml.CustomDataType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCustomDataTypeAdapter() {
		if (customDataTypeItemProvider == null) {
			customDataTypeItemProvider = new CustomDataTypeItemProvider(this);
		}

		return customDataTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link typhonml.DataTypeItem} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DataTypeItemItemProvider dataTypeItemItemProvider;

	/**
	 * This creates an adapter for a {@link typhonml.DataTypeItem}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDataTypeItemAdapter() {
		if (dataTypeItemItemProvider == null) {
			dataTypeItemItemProvider = new DataTypeItemItemProvider(this);
		}

		return dataTypeItemItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link typhonml.FreeText} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FreeTextItemProvider freeTextItemProvider;

	/**
	 * This creates an adapter for a {@link typhonml.FreeText}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFreeTextAdapter() {
		if (freeTextItemProvider == null) {
			freeTextItemProvider = new FreeTextItemProvider(this);
		}

		return freeTextItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link typhonml.NlpTask} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NlpTaskItemProvider nlpTaskItemProvider;

	/**
	 * This creates an adapter for a {@link typhonml.NlpTask}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNlpTaskAdapter() {
		if (nlpTaskItemProvider == null) {
			nlpTaskItemProvider = new NlpTaskItemProvider(this);
		}

		return nlpTaskItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link typhonml.DataTypeImplementationPackage} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DataTypeImplementationPackageItemProvider dataTypeImplementationPackageItemProvider;

	/**
	 * This creates an adapter for a {@link typhonml.DataTypeImplementationPackage}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDataTypeImplementationPackageAdapter() {
		if (dataTypeImplementationPackageItemProvider == null) {
			dataTypeImplementationPackageItemProvider = new DataTypeImplementationPackageItemProvider(this);
		}

		return dataTypeImplementationPackageItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link typhonml.Entity} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EntityItemProvider entityItemProvider;

	/**
	 * This creates an adapter for a {@link typhonml.Entity}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEntityAdapter() {
		if (entityItemProvider == null) {
			entityItemProvider = new EntityItemProvider(this);
		}

		return entityItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link typhonml.Attribute} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AttributeItemProvider attributeItemProvider;

	/**
	 * This creates an adapter for a {@link typhonml.Attribute}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAttributeAdapter() {
		if (attributeItemProvider == null) {
			attributeItemProvider = new AttributeItemProvider(this);
		}

		return attributeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link typhonml.Relation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RelationItemProvider relationItemProvider;

	/**
	 * This creates an adapter for a {@link typhonml.Relation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRelationAdapter() {
		if (relationItemProvider == null) {
			relationItemProvider = new RelationItemProvider(this);
		}

		return relationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link typhonml.RelationalDB} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RelationalDBItemProvider relationalDBItemProvider;

	/**
	 * This creates an adapter for a {@link typhonml.RelationalDB}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRelationalDBAdapter() {
		if (relationalDBItemProvider == null) {
			relationalDBItemProvider = new RelationalDBItemProvider(this);
		}

		return relationalDBItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link typhonml.Table} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TableItemProvider tableItemProvider;

	/**
	 * This creates an adapter for a {@link typhonml.Table}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTableAdapter() {
		if (tableItemProvider == null) {
			tableItemProvider = new TableItemProvider(this);
		}

		return tableItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link typhonml.IndexSpec} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IndexSpecItemProvider indexSpecItemProvider;

	/**
	 * This creates an adapter for a {@link typhonml.IndexSpec}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIndexSpecAdapter() {
		if (indexSpecItemProvider == null) {
			indexSpecItemProvider = new IndexSpecItemProvider(this);
		}

		return indexSpecItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link typhonml.IdSpec} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IdSpecItemProvider idSpecItemProvider;

	/**
	 * This creates an adapter for a {@link typhonml.IdSpec}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIdSpecAdapter() {
		if (idSpecItemProvider == null) {
			idSpecItemProvider = new IdSpecItemProvider(this);
		}

		return idSpecItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link typhonml.DocumentDB} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DocumentDBItemProvider documentDBItemProvider;

	/**
	 * This creates an adapter for a {@link typhonml.DocumentDB}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDocumentDBAdapter() {
		if (documentDBItemProvider == null) {
			documentDBItemProvider = new DocumentDBItemProvider(this);
		}

		return documentDBItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link typhonml.Collection} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CollectionItemProvider collectionItemProvider;

	/**
	 * This creates an adapter for a {@link typhonml.Collection}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCollectionAdapter() {
		if (collectionItemProvider == null) {
			collectionItemProvider = new CollectionItemProvider(this);
		}

		return collectionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link typhonml.KeyValueDB} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected KeyValueDBItemProvider keyValueDBItemProvider;

	/**
	 * This creates an adapter for a {@link typhonml.KeyValueDB}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createKeyValueDBAdapter() {
		if (keyValueDBItemProvider == null) {
			keyValueDBItemProvider = new KeyValueDBItemProvider(this);
		}

		return keyValueDBItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link typhonml.KeyValueElement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected KeyValueElementItemProvider keyValueElementItemProvider;

	/**
	 * This creates an adapter for a {@link typhonml.KeyValueElement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createKeyValueElementAdapter() {
		if (keyValueElementItemProvider == null) {
			keyValueElementItemProvider = new KeyValueElementItemProvider(this);
		}

		return keyValueElementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link typhonml.GraphDB} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GraphDBItemProvider graphDBItemProvider;

	/**
	 * This creates an adapter for a {@link typhonml.GraphDB}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGraphDBAdapter() {
		if (graphDBItemProvider == null) {
			graphDBItemProvider = new GraphDBItemProvider(this);
		}

		return graphDBItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link typhonml.GraphNode} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GraphNodeItemProvider graphNodeItemProvider;

	/**
	 * This creates an adapter for a {@link typhonml.GraphNode}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGraphNodeAdapter() {
		if (graphNodeItemProvider == null) {
			graphNodeItemProvider = new GraphNodeItemProvider(this);
		}

		return graphNodeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link typhonml.GraphAttribute} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GraphAttributeItemProvider graphAttributeItemProvider;

	/**
	 * This creates an adapter for a {@link typhonml.GraphAttribute}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGraphAttributeAdapter() {
		if (graphAttributeItemProvider == null) {
			graphAttributeItemProvider = new GraphAttributeItemProvider(this);
		}

		return graphAttributeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link typhonml.GraphEdge} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GraphEdgeItemProvider graphEdgeItemProvider;

	/**
	 * This creates an adapter for a {@link typhonml.GraphEdge}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGraphEdgeAdapter() {
		if (graphEdgeItemProvider == null) {
			graphEdgeItemProvider = new GraphEdgeItemProvider(this);
		}

		return graphEdgeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link typhonml.GraphEdgeLabel} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GraphEdgeLabelItemProvider graphEdgeLabelItemProvider;

	/**
	 * This creates an adapter for a {@link typhonml.GraphEdgeLabel}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGraphEdgeLabelAdapter() {
		if (graphEdgeLabelItemProvider == null) {
			graphEdgeLabelItemProvider = new GraphEdgeLabelItemProvider(this);
		}

		return graphEdgeLabelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link typhonml.ColumnDB} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ColumnDBItemProvider columnDBItemProvider;

	/**
	 * This creates an adapter for a {@link typhonml.ColumnDB}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createColumnDBAdapter() {
		if (columnDBItemProvider == null) {
			columnDBItemProvider = new ColumnDBItemProvider(this);
		}

		return columnDBItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link typhonml.Column} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ColumnItemProvider columnItemProvider;

	/**
	 * This creates an adapter for a {@link typhonml.Column}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createColumnAdapter() {
		if (columnItemProvider == null) {
			columnItemProvider = new ColumnItemProvider(this);
		}

		return columnItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link typhonml.RenameEntity} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RenameEntityItemProvider renameEntityItemProvider;

	/**
	 * This creates an adapter for a {@link typhonml.RenameEntity}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRenameEntityAdapter() {
		if (renameEntityItemProvider == null) {
			renameEntityItemProvider = new RenameEntityItemProvider(this);
		}

		return renameEntityItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link typhonml.ChangeRelationContainement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ChangeRelationContainementItemProvider changeRelationContainementItemProvider;

	/**
	 * This creates an adapter for a {@link typhonml.ChangeRelationContainement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createChangeRelationContainementAdapter() {
		if (changeRelationContainementItemProvider == null) {
			changeRelationContainementItemProvider = new ChangeRelationContainementItemProvider(this);
		}

		return changeRelationContainementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link typhonml.SplitEntityVertical} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SplitEntityVerticalItemProvider splitEntityVerticalItemProvider;

	/**
	 * This creates an adapter for a {@link typhonml.SplitEntityVertical}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSplitEntityVerticalAdapter() {
		if (splitEntityVerticalItemProvider == null) {
			splitEntityVerticalItemProvider = new SplitEntityVerticalItemProvider(this);
		}

		return splitEntityVerticalItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link typhonml.SplitEntityHorizontal} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SplitEntityHorizontalItemProvider splitEntityHorizontalItemProvider;

	/**
	 * This creates an adapter for a {@link typhonml.SplitEntityHorizontal}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSplitEntityHorizontalAdapter() {
		if (splitEntityHorizontalItemProvider == null) {
			splitEntityHorizontalItemProvider = new SplitEntityHorizontalItemProvider(this);
		}

		return splitEntityHorizontalItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link typhonml.FunctionalTag} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FunctionalTagItemProvider functionalTagItemProvider;

	/**
	 * This creates an adapter for a {@link typhonml.FunctionalTag}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFunctionalTagAdapter() {
		if (functionalTagItemProvider == null) {
			functionalTagItemProvider = new FunctionalTagItemProvider(this);
		}

		return functionalTagItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link typhonml.NFunctionalTag} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NFunctionalTagItemProvider nFunctionalTagItemProvider;

	/**
	 * This creates an adapter for a {@link typhonml.NFunctionalTag}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNFunctionalTagAdapter() {
		if (nFunctionalTagItemProvider == null) {
			nFunctionalTagItemProvider = new NFunctionalTagItemProvider(this);
		}

		return nFunctionalTagItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void dispose() {
		if (modelItemProvider != null) modelItemProvider.dispose();
		if (addEntityItemProvider != null) addEntityItemProvider.dispose();
		if (removeEntityItemProvider != null) removeEntityItemProvider.dispose();
		if (splitEntityItemProvider != null) splitEntityItemProvider.dispose();
		if (migrateEntityItemProvider != null) migrateEntityItemProvider.dispose();
		if (mergeEntityItemProvider != null) mergeEntityItemProvider.dispose();
		if (addRelationItemProvider != null) addRelationItemProvider.dispose();
		if (removeRelationItemProvider != null) removeRelationItemProvider.dispose();
		if (renameRelationItemProvider != null) renameRelationItemProvider.dispose();
		if (enableRelationContainmentItemProvider != null) enableRelationContainmentItemProvider.dispose();
		if (disableRelationContainmentItemProvider != null) disableRelationContainmentItemProvider.dispose();
		if (enableBidirectionalRelationItemProvider != null) enableBidirectionalRelationItemProvider.dispose();
		if (disableBidirectionalRelationItemProvider != null) disableBidirectionalRelationItemProvider.dispose();
		if (changeRelationCardinalityItemProvider != null) changeRelationCardinalityItemProvider.dispose();
		if (addAttributeItemProvider != null) addAttributeItemProvider.dispose();
		if (changeAttributeTypeItemProvider != null) changeAttributeTypeItemProvider.dispose();
		if (removeAttributeItemProvider != null) removeAttributeItemProvider.dispose();
		if (renameAttributeItemProvider != null) renameAttributeItemProvider.dispose();
		if (renameTableItemProvider != null) renameTableItemProvider.dispose();
		if (addIndexItemProvider != null) addIndexItemProvider.dispose();
		if (dropIndexItemProvider != null) dropIndexItemProvider.dispose();
		if (addAttributesToIndexItemProvider != null) addAttributesToIndexItemProvider.dispose();
		if (removeAttributesToIndexItemProvider != null) removeAttributesToIndexItemProvider.dispose();
		if (renameCollectionItemProvider != null) renameCollectionItemProvider.dispose();
		if (addCollectionIndexItemProvider != null) addCollectionIndexItemProvider.dispose();
		if (dropCollectionIndexItemProvider != null) dropCollectionIndexItemProvider.dispose();
		if (addGraphAttributeItemProvider != null) addGraphAttributeItemProvider.dispose();
		if (removeGraphAttributeItemProvider != null) removeGraphAttributeItemProvider.dispose();
		if (addGraphEdgeItemProvider != null) addGraphEdgeItemProvider.dispose();
		if (removeGraphEdgeItemProvider != null) removeGraphEdgeItemProvider.dispose();
		if (renabeGraphEdgeLabelItemProvider != null) renabeGraphEdgeLabelItemProvider.dispose();
		if (customDataTypeItemProvider != null) customDataTypeItemProvider.dispose();
		if (dataTypeItemItemProvider != null) dataTypeItemItemProvider.dispose();
		if (freeTextItemProvider != null) freeTextItemProvider.dispose();
		if (nlpTaskItemProvider != null) nlpTaskItemProvider.dispose();
		if (dataTypeImplementationPackageItemProvider != null) dataTypeImplementationPackageItemProvider.dispose();
		if (entityItemProvider != null) entityItemProvider.dispose();
		if (attributeItemProvider != null) attributeItemProvider.dispose();
		if (relationItemProvider != null) relationItemProvider.dispose();
		if (relationalDBItemProvider != null) relationalDBItemProvider.dispose();
		if (tableItemProvider != null) tableItemProvider.dispose();
		if (indexSpecItemProvider != null) indexSpecItemProvider.dispose();
		if (idSpecItemProvider != null) idSpecItemProvider.dispose();
		if (documentDBItemProvider != null) documentDBItemProvider.dispose();
		if (collectionItemProvider != null) collectionItemProvider.dispose();
		if (keyValueDBItemProvider != null) keyValueDBItemProvider.dispose();
		if (keyValueElementItemProvider != null) keyValueElementItemProvider.dispose();
		if (graphDBItemProvider != null) graphDBItemProvider.dispose();
		if (graphNodeItemProvider != null) graphNodeItemProvider.dispose();
		if (graphAttributeItemProvider != null) graphAttributeItemProvider.dispose();
		if (graphEdgeItemProvider != null) graphEdgeItemProvider.dispose();
		if (graphEdgeLabelItemProvider != null) graphEdgeLabelItemProvider.dispose();
		if (columnDBItemProvider != null) columnDBItemProvider.dispose();
		if (columnItemProvider != null) columnItemProvider.dispose();
		if (renameEntityItemProvider != null) renameEntityItemProvider.dispose();
		if (changeRelationContainementItemProvider != null) changeRelationContainementItemProvider.dispose();
		if (splitEntityVerticalItemProvider != null) splitEntityVerticalItemProvider.dispose();
		if (splitEntityHorizontalItemProvider != null) splitEntityHorizontalItemProvider.dispose();
		if (functionalTagItemProvider != null) functionalTagItemProvider.dispose();
		if (nFunctionalTagItemProvider != null) nFunctionalTagItemProvider.dispose();
	}

}
