
operation TyphonML!Entity hasTags(): Boolean{
   return self.functionalTags.notEmpty() and self.nfunctionalTags.notEmpty();
}


operation TyphonML!Entity feasabilityCheck(): List<TyphonMLReq!DBType>{
	//get all Entities with tag
	
	//get all DBType with requirements
	
	var result = TyphonMLReq!DBType.allInstances();
	return result;
}

operation getEntitiesTag(): String{
	for(tag in TyphonML!Entity.allInstances()){
		tag.name.println();
		for(f in tag.functionalTags){
			("\t"+f.name).println();
		}
		for(nf in tag.nfunctionalTags){
			("\t"+nf.name).println();
		}
	}
	return "Done";
}

operation getDBRequirements(): String{
	for(db in TyphonMLReq!DBType.allInstances()){
		db.name.println();
		for(f in db.frequirements){
			("\t"+f.name).println();
		}
		for(nf in db.nfrequirements){
			("\t"+nf.name).println();
		}
	}
	return "Done";
}


operation TyphonML!Entity generateDatabaseForEntity(selectedDatabase : TyphonMLReq!DBType): Boolean{
	switch(selectedDatabase.dbType.name){
		case "RelationalDB" : createRelationalDB(self, selectedDatabase.name);
		case "DocumentDB" : createDocumentDB(self);
		case "KeyValueDB" : createKeyValueDB(self);
		case "GraphDB" : createGraphDB(self);
		case "ColumnDB" : createColumnDB(self);
		default : "No Databases Available.";
	}
	return true;
}


operation createRelationalDB(entity : TyphonML!Entity, dbName: String){
	var db = new TyphonML!RelationalDB;
	db.name = dbName;
	var table = new TyphonML!Table;
	table.name = entity.name + "Table";
	table.entity = entity;
	table.db = db;
	db.tables.add(table);
	entity.eContainer().databases.add(db);
	"RelationalDB creation".println();
}

operation createDocumentDB(entity : TyphonML!Entity){
	"DocumentDB creation".println();
}

operation createKeyValueDB(entity : TyphonML!Entity){
	"KeyValueDB creation".println();
}

operation createGraphDB(entity : TyphonML!Entity){
	"GraphDB creation".println();
}

operation createColumnDB(entity : TyphonML!Entity){
	"ColumnDB creation".println();	
}


