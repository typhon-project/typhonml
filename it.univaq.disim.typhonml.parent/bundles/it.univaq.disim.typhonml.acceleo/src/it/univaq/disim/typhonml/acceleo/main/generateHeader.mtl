[comment encoding = UTF-8 /]
[module generateHeader('http://org.typhon.dsls.typhonml.sirius')]


[template public generateHeader(aModel : Model)]
"swagger": "2.0",
"info": {
	"description": "Api Documentation",
	"version": "1.0",
	"title": "Api Documentation",
	"termsOfService": "urn:tos",
	"contact": { },
	"license": {
		"name": "Apache 2.0",
		"url": "http://www.apache.org/licenses/LICENSE-2.0"
	}
},
"basePath": "/",
[/template]

[template public generateTags(aModel : Model)]
"tags":['['/] 
[for (entity : Entity | aModel.entities) separator(',')]
	{
		"name": "[entity.name/]-rest-controller",
		"description": "[entity.name/] Rest Controller"
	}[/for]

[']'/],
[/template]

[template public generatePaths(aModel : Model)]
"paths":{
[for (entity : Entity | aModel.entities) separator(',\n')]
	[generatePost(entity)/]
	[generateGetDeletePatch(entity)/]
[/for]
},
[/template]

[template private generatePost(anEntity : Entity)]
"/[anEntity.name/]": {
	"post": {
		"tags": ['['/]
			"[anEntity.name/]-rest-controller"
		],
		"summary": "store[anEntity.name/]",
		"operationId": "store[anEntity.name/]UsingPOST",
		"consumes": ['['/]
			"application/json"
		[']'/],
		"produces": ['['/]
			"application/json"
		[']'/],
		"parameters": ['['/]
			{
				"in": "body",
				"name": "[anEntity.name.toLower()/]",
				"description": "[anEntity.name.toLower()/]",
				"required": true,
				"schema": {
					"$ref": "#/definitions/[anEntity.name/]"
				}
			}
		[']'/],
		"responses": {
			"200": {
				"description": "OK",
				"schema": {
					"type": "boolean"
				}
			},
			"201": {
				"description": "Created"
			},
			"401": {
				"description": "Unauthorized"
			},
			"403": {
				"description": "Forbidden"
			},
			"404": {
				"description": "Not Found"
			}
		},
		"deprecated": false
	}
},
[/template]

[template private generateGetDeletePatch(anEntity : Entity)]
"/[anEntity.name/]/{id}": {
	[generateGet(anEntity)/],
	[generateDelete(anEntity)/],
	[generatePatch(anEntity)/]
}
[/template]

[template private generateGet(anEntity : Entity)]
"get": {
	"tags": ['['/]
		"[anEntity.name/]-rest-controller"
	[']'/],
	"summary": "get[anEntity.name/]",
	"operationId": "get[anEntity.name/]UsingGET",
	"produces": ['['/]
		"application/json"
	[']'/],
	"parameters": ['['/]
		{
			"name": "id",
			"in": "path",
			"description": "id",
			"required": true,
			"type": "string"
		}
	],
	"responses": {
		"200": {
			"description": "OK",
			"schema": {
				"$ref": "#/definitions/[anEntity.name/]"
			}
		},
		"401": {
			"description": "Unauthorized"
		},
		"403": {
			"description": "Forbidden"
		},
		"404": {
			"description": "Not Found"
		}
	},
	"deprecated": false
}
[/template]

[template private generateDelete(anEntity : Entity)]
"delete": {
	"tags": ['['/]
		"[anEntity.name/]-rest-controller"
	[']'/],
	"summary": "delete[anEntity.name/]",
	"operationId": "delete[anEntity.name/]UsingDELETE",
	"produces": ['['/]
		"application/json"
	[']'/],
	"parameters": ['['/]
		{
			"name": "id",
			"in": "path",
			"description": "id",
			"required": true,
			"type": "string"
		}
	[']'/],
	"responses": {
		"200": {
			"description": "OK",
			"schema": {
				"type": "boolean"
			}
		},
		"204": {
			"description": "No Content"
		},
		"401": {
			"description": "Unauthorized"
		},
		"403": {
			"description": "Forbidden"
		}
	},
	"deprecated": false
}
[/template]
[template private generatePatch(anEntity : Entity)]
"patch": {
	"tags": ['['/]
		"[anEntity.name/]-rest-controller"
	[']'/],
	"summary": "update[anEntity.name/]",
	"operationId": "update[anEntity.name/]UsingPATCH",
	"consumes": ['['/]
		"application/json"
	[']'/],
	"produces": ['['/]
		"application/json"
	[']'/],
	"parameters": ['['/]
		{
			"in": "body",
			"name": "[anEntity.name.toLower()/]",
			"description": "[anEntity.name.toLower()/]",
			"required": true,
			"schema": {
				"$ref": "#/definitions/[anEntity.name/]Patch"
			}
		},
		{
			"name": "id",
			"in": "path",
			"description": "id",
			"required": true,
			"type": "string"
		}
	],
	"responses": {
		"200": {
			"description": "OK",
			"schema": {
				"type": "boolean"
			}
		},
		"204": {
			"description": "No Content"
		},
		"401": {
			"description": "Unauthorized"
		},
		"403": {
			"description": "Forbidden"
		}
	},
	"deprecated": false
}
[/template]
[template public generateDefinitions(aModel : Model)]
"definitions" : {
	[generateStandardDefinitions(aModel)/],
	[generatePatchDefinitions(aModel)/]	
}
[/template]
[template public generateStandardDefinitions(aModel : Model)]

[for(entity : Entity | aModel.entities) separator(',\n')]
"[entity.name/]": {
	"type" : "object",
	"properties": {
[for(attribute : EntityAttributeKind | entity.attributes) separator(',\n')]
		"[attribute.name/]" : {
			"type" : "string"
		}[/for]
[if (not entity.relations->isEmpty())],[/if]
[for(relation : Relation | entity.relations) separator(',\n')]
[if (relation.cardinality = typhonml::Cardinality::zero_one 
		or relation.cardinality = typhonml::Cardinality::one)]
		"[relation.name/]" : {
			"type" : "string"
		}
[else]
		"[relation.name/]" : {
			"type" : "array",
			"items" : {
				"type": "string"
			}
		}
[/if][/for]

	},
	"title" : "[entity.name/]"
}[/for]


[/template]

[template public generatePatchDefinitions(aModel : Model)]

[for(entity : Entity | aModel.entities) separator(',\n')]
"[entity.name/]Patch": {
	"type" : "object",
	"properties": {
[for(attribute : EntityAttributeKind | entity.attributes) separator(',\n')]
		"[attribute.name/]" : {
			"type" : "string"
		}[/for]
[if (not entity.relations->isEmpty())],[/if]
[for(relation : Relation | entity.relations) separator(',\n')]
[if (relation.cardinality = typhonml::Cardinality::zero_one 
		or relation.cardinality = typhonml::Cardinality::one)]
		"[relation.name/]" : {
			"type" : "string"
		}
[else]
		"[relation.name/]" : {
			"$ref" : "#/definitions/PatchMultipleRelation"
		}
[/if][/for]

	},
	"title" : "[entity.name/]"
}[/for],
"PatchMultipleRelation" : {
	"type" : "object",
	"properties": {
		"add" : {
			"type" : "array",
			"items" : {
				"type": "string"
			}
		},
		"remove" : {
			"type" : "array",
			"items" : {
				"type": "string"
			}
		},
		"set" : {
			"type" : "array",
			"items" : {
				"type": "string"
			}
		}
	}
}
[/template]

[template private generateProperties(attrKind : EntityAttributeKind)]
"[attrKind.name/]" : {
	"type" : "string"
}
[/template]
