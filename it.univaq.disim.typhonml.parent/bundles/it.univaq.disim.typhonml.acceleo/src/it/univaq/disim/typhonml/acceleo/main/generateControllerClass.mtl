[comment encoding = UTF-8 /]
[module generateControllerClass('http://org.typhon.dsls.typhonml.sirius')]


[template public generateControllerClass(anEntity : Entity)]
[comment @main /]
[file ('/src/main/java/org/typhon/dl/controller/' + anEntity.name + 'RestController.java', 
		false, 'UTF-8')]
package org.typhon.dl.controller;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import lombok.extern.java.Log;

import org.typhon.dl.domain.[anEntity.name/];

@Controller
@RequestMapping("/[anEntity.name/]")
@Log
public class [anEntity.name/]RestController {
	@Value("${ql.base.address}")
	private String qlBaseAddress;
[anEntity.getter()/]
[anEntity.poster()/]
[anEntity.deleter()/]
[anEntity.updater()/]

}
[/file]
[/template]

[template private getter(anEntity : Entity)]
	@RequestMapping(value = "/{id}", produces = {"application/json"}, method = RequestMethod.GET)
	@ResponseBody
	public ResponseEntity<[anEntity.name/]> get[anEntity.name/](@PathVariable("id") String id) {
		try {
			[anEntity.name/] [anEntity.name.toLower()/] = null;
			// TODO call QL.getEntity
			if ([anEntity.name.toLower()/] == null) {
				log.severe("Entity not found");
				return ResponseEntity.status(HttpStatus.NOT_FOUND).body(null);
			}
			else {
				log.info("Entity is found");
				return ResponseEntity.status(HttpStatus.OK).body([anEntity.name.toLower()/]);
			}
		} catch (Exception e) {
			return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(null);
		}
	}
[/template]

[template private poster(anEntity : Entity)]
	@RequestMapping(produces = {"application/json"}, method = RequestMethod.POST)
	@ResponseBody
	public ResponseEntity<Boolean> store[anEntity.name/](@RequestBody [anEntity.name/] [anEntity.name.toLower()/]) {
		try {
			// TODO call store QL.storeEntity
			return ResponseEntity.status(HttpStatus.OK).body(Boolean.TRUE);
		} catch (Exception e) {
			return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(Boolean.FALSE);
		}
	}
[/template]

[template private deleter(anEntity : Entity)]
	@RequestMapping(value = "/{id}", produces = {"application/json"}, method = RequestMethod.DELETE)
	@ResponseBody
	public ResponseEntity<Boolean> delete[anEntity.name/](@PathVariable("id") String id) {
		[anEntity.name/] [anEntity.name.toLower()/] = null;
		// TODO call QL.getEntity
		if ([anEntity.name.toLower()/] == null) {
			log.severe("Entity not found");
			return ResponseEntity.status(HttpStatus.NOT_FOUND).body(Boolean.FALSE);
		}
		else
			try {
				// TODO call QL.deleteEntity
				return ResponseEntity.status(HttpStatus.OK).body(Boolean.TRUE);
			} catch (Exception e) {
				return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(Boolean.FALSE);
			}
	}
[/template]

[template private updater(anEntity : Entity)]
	@RequestMapping(value = "/{id}", produces = {"application/json"}, method = RequestMethod.PATCH)
	@ResponseBody
	public ResponseEntity<Boolean> update[anEntity.name/](@RequestBody [anEntity.name/] [anEntity.name.toLower()/], @PathVariable("id") String id) {
		[anEntity.name/] [anEntity.name.toLower()/]_ = null;
		// TODO call QL.getEntity
		if ([anEntity.name.toLower()/]_ == null) {
			log.severe("Entity not found");
			return ResponseEntity.status(HttpStatus.NOT_FOUND).body(Boolean.FALSE);
		}
		else
			try {
				// TODO call QL.update	Entity
				return ResponseEntity.status(HttpStatus.OK).body(Boolean.TRUE);
			} catch (Exception e) {
				return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(Boolean.FALSE);
			}
	}
[/template]