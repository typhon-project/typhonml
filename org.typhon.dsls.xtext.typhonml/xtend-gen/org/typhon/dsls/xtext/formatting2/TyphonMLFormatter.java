/**
 * generated by Xtext 2.12.0
 */
package org.typhon.dsls.xtext.formatting2;

import com.google.inject.Inject;
import java.util.Arrays;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;
import org.typhon.dsls.sirius.typhonml.DataType;
import org.typhon.dsls.sirius.typhonml.Database;
import org.typhon.dsls.sirius.typhonml.Model;
import org.typhon.dsls.sirius.typhonml.RelationalDB;
import org.typhon.dsls.sirius.typhonml.Table;
import org.typhon.dsls.xtext.services.TyphonMLGrammarAccess;

@SuppressWarnings("all")
public class TyphonMLFormatter extends AbstractFormatter2 {
  @Inject
  @Extension
  private TyphonMLGrammarAccess _typhonMLGrammarAccess;
  
  protected void _format(final Model model, @Extension final IFormattableDocument document) {
    EList<DataType> _dataTypes = model.getDataTypes();
    for (final DataType dataType : _dataTypes) {
      document.<DataType>format(dataType);
    }
    EList<Database> _databases = model.getDatabases();
    for (final Database database : _databases) {
      document.<Database>format(database);
    }
  }
  
  protected void _format(final RelationalDB relationalDB, @Extension final IFormattableDocument document) {
    EList<Table> _tables = relationalDB.getTables();
    for (final Table table : _tables) {
      document.<Table>format(table);
    }
  }
  
  public void format(final Object relationalDB, final IFormattableDocument document) {
    if (relationalDB instanceof XtextResource) {
      _format((XtextResource)relationalDB, document);
      return;
    } else if (relationalDB instanceof RelationalDB) {
      _format((RelationalDB)relationalDB, document);
      return;
    } else if (relationalDB instanceof Model) {
      _format((Model)relationalDB, document);
      return;
    } else if (relationalDB instanceof EObject) {
      _format((EObject)relationalDB, document);
      return;
    } else if (relationalDB == null) {
      _format((Void)null, document);
      return;
    } else if (relationalDB != null) {
      _format(relationalDB, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(relationalDB, document).toString());
    }
  }
}
