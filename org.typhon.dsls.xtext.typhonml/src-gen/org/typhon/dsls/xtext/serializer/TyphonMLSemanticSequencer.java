/*
 * generated by Xtext 2.14.0
 */
package org.typhon.dsls.xtext.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.typhon.dsls.sirius.typhonml.Attribute;
import org.typhon.dsls.sirius.typhonml.Collection;
import org.typhon.dsls.sirius.typhonml.CustomDataType;
import org.typhon.dsls.sirius.typhonml.DataTypeItem;
import org.typhon.dsls.sirius.typhonml.DocumentDB;
import org.typhon.dsls.sirius.typhonml.Entity;
import org.typhon.dsls.sirius.typhonml.GraphAttribute;
import org.typhon.dsls.sirius.typhonml.GraphDB;
import org.typhon.dsls.sirius.typhonml.GraphEdge;
import org.typhon.dsls.sirius.typhonml.GraphEdgeLabel;
import org.typhon.dsls.sirius.typhonml.GraphNode;
import org.typhon.dsls.sirius.typhonml.IdSpec;
import org.typhon.dsls.sirius.typhonml.IndexSpec;
import org.typhon.dsls.sirius.typhonml.KeyValueDB;
import org.typhon.dsls.sirius.typhonml.KeyValueElement;
import org.typhon.dsls.sirius.typhonml.Model;
import org.typhon.dsls.sirius.typhonml.PrimitiveDataType;
import org.typhon.dsls.sirius.typhonml.Relation;
import org.typhon.dsls.sirius.typhonml.RelationalDB;
import org.typhon.dsls.sirius.typhonml.Table;
import org.typhon.dsls.sirius.typhonml.TyphonmlPackage;
import org.typhon.dsls.xtext.services.TyphonMLGrammarAccess;

@SuppressWarnings("all")
public class TyphonMLSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private TyphonMLGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == TyphonmlPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case TyphonmlPackage.ATTRIBUTE:
				sequence_Attribute(context, (Attribute) semanticObject); 
				return; 
			case TyphonmlPackage.COLLECTION:
				sequence_DocumentDBCollection(context, (Collection) semanticObject); 
				return; 
			case TyphonmlPackage.CUSTOM_DATA_TYPE:
				sequence_CustomDataType(context, (CustomDataType) semanticObject); 
				return; 
			case TyphonmlPackage.DATA_TYPE_ITEM:
				sequence_DataTypeItem(context, (DataTypeItem) semanticObject); 
				return; 
			case TyphonmlPackage.DOCUMENT_DB:
				sequence_DocumentDB(context, (DocumentDB) semanticObject); 
				return; 
			case TyphonmlPackage.ENTITY:
				sequence_Entity(context, (Entity) semanticObject); 
				return; 
			case TyphonmlPackage.GRAPH_ATTRIBUTE:
				sequence_GraphAttribute(context, (GraphAttribute) semanticObject); 
				return; 
			case TyphonmlPackage.GRAPH_DB:
				sequence_GraphDB(context, (GraphDB) semanticObject); 
				return; 
			case TyphonmlPackage.GRAPH_EDGE:
				sequence_Edge(context, (GraphEdge) semanticObject); 
				return; 
			case TyphonmlPackage.GRAPH_EDGE_LABEL:
				sequence_GraphEdgeLabel(context, (GraphEdgeLabel) semanticObject); 
				return; 
			case TyphonmlPackage.GRAPH_NODE:
				sequence_Node(context, (GraphNode) semanticObject); 
				return; 
			case TyphonmlPackage.ID_SPEC:
				sequence_IdSpec(context, (IdSpec) semanticObject); 
				return; 
			case TyphonmlPackage.INDEX_SPEC:
				sequence_IndexSpec(context, (IndexSpec) semanticObject); 
				return; 
			case TyphonmlPackage.KEY_VALUE_DB:
				sequence_KeyValueDB(context, (KeyValueDB) semanticObject); 
				return; 
			case TyphonmlPackage.KEY_VALUE_ELEMENT:
				sequence_KeyValueElement(context, (KeyValueElement) semanticObject); 
				return; 
			case TyphonmlPackage.MODEL:
				sequence_Model(context, (Model) semanticObject); 
				return; 
			case TyphonmlPackage.PRIMITIVE_DATA_TYPE:
				sequence_PrimitiveDataType(context, (PrimitiveDataType) semanticObject); 
				return; 
			case TyphonmlPackage.RELATION:
				sequence_Relation(context, (Relation) semanticObject); 
				return; 
			case TyphonmlPackage.RELATIONAL_DB:
				sequence_RelationalDB(context, (RelationalDB) semanticObject); 
				return; 
			case TyphonmlPackage.TABLE:
				sequence_Table(context, (Table) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Attribute returns Attribute
	 *
	 * Constraint:
	 *     (name=EString type=[DataType|EString]?)
	 */
	protected void sequence_Attribute(ISerializationContext context, Attribute semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DataType returns CustomDataType
	 *     CustomDataType returns CustomDataType
	 *
	 * Constraint:
	 *     (name=EString elements+=DataTypeItem*)
	 */
	protected void sequence_CustomDataType(ISerializationContext context, CustomDataType semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DataTypeItem returns DataTypeItem
	 *
	 * Constraint:
	 *     (name=EString type=[DataType|EString])
	 */
	protected void sequence_DataTypeItem(ISerializationContext context, DataTypeItem semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, TyphonmlPackage.Literals.NAMED_ELEMENT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TyphonmlPackage.Literals.NAMED_ELEMENT__NAME));
			if (transientValues.isValueTransient(semanticObject, TyphonmlPackage.Literals.DATA_TYPE_ITEM__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TyphonmlPackage.Literals.DATA_TYPE_ITEM__TYPE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDataTypeItemAccess().getNameEStringParserRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getDataTypeItemAccess().getTypeDataTypeEStringParserRuleCall_3_0_1(), semanticObject.eGet(TyphonmlPackage.Literals.DATA_TYPE_ITEM__TYPE, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     DocumentDBCollection returns Collection
	 *
	 * Constraint:
	 *     (name=ID entity=[Entity|ID])
	 */
	protected void sequence_DocumentDBCollection(ISerializationContext context, Collection semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, TyphonmlPackage.Literals.NAMED_ELEMENT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TyphonmlPackage.Literals.NAMED_ELEMENT__NAME));
			if (transientValues.isValueTransient(semanticObject, TyphonmlPackage.Literals.COLLECTION__ENTITY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TyphonmlPackage.Literals.COLLECTION__ENTITY));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDocumentDBCollectionAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getDocumentDBCollectionAccess().getEntityEntityIDTerminalRuleCall_3_0_1(), semanticObject.eGet(TyphonmlPackage.Literals.COLLECTION__ENTITY, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Database returns DocumentDB
	 *     DocumentDB returns DocumentDB
	 *
	 * Constraint:
	 *     (name=ID collections+=DocumentDBCollection*)
	 */
	protected void sequence_DocumentDB(ISerializationContext context, DocumentDB semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Edge returns GraphEdge
	 *
	 * Constraint:
	 *     (name=ID from=[GraphNode|ID] to=[GraphNode|ID] labels+=GraphEdgeLabel*)
	 */
	protected void sequence_Edge(ISerializationContext context, GraphEdge semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DataType returns Entity
	 *     Entity returns Entity
	 *
	 * Constraint:
	 *     (name=EString attributes+=Attribute* relations+=Relation*)
	 */
	protected void sequence_Entity(ISerializationContext context, Entity semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     GraphAttribute returns GraphAttribute
	 *
	 * Constraint:
	 *     (name=EString value=[Attribute|STRING])
	 */
	protected void sequence_GraphAttribute(ISerializationContext context, GraphAttribute semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, TyphonmlPackage.Literals.NAMED_ELEMENT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TyphonmlPackage.Literals.NAMED_ELEMENT__NAME));
			if (transientValues.isValueTransient(semanticObject, TyphonmlPackage.Literals.GRAPH_ATTRIBUTE__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TyphonmlPackage.Literals.GRAPH_ATTRIBUTE__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getGraphAttributeAccess().getNameEStringParserRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getGraphAttributeAccess().getValueAttributeSTRINGTerminalRuleCall_3_0_1(), semanticObject.eGet(TyphonmlPackage.Literals.GRAPH_ATTRIBUTE__VALUE, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Database returns GraphDB
	 *     GraphDB returns GraphDB
	 *
	 * Constraint:
	 *     (name=ID nodes+=Node* edges+=Edge*)
	 */
	protected void sequence_GraphDB(ISerializationContext context, GraphDB semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     GraphEdgeLabel returns GraphEdgeLabel
	 *
	 * Constraint:
	 *     (name=EString type=[DataType|EString]?)
	 */
	protected void sequence_GraphEdgeLabel(ISerializationContext context, GraphEdgeLabel semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     IdSpec returns IdSpec
	 *
	 * Constraint:
	 *     attributes+=[Attribute|STRING]*
	 */
	protected void sequence_IdSpec(ISerializationContext context, IdSpec semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     IndexSpec returns IndexSpec
	 *
	 * Constraint:
	 *     (name=ID attributes+=[Attribute|STRING]*)
	 */
	protected void sequence_IndexSpec(ISerializationContext context, IndexSpec semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Database returns KeyValueDB
	 *     KeyValueDB returns KeyValueDB
	 *
	 * Constraint:
	 *     (name=ID elements+=KeyValueElement*)
	 */
	protected void sequence_KeyValueDB(ISerializationContext context, KeyValueDB semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     KeyValueElement returns KeyValueElement
	 *
	 * Constraint:
	 *     (key=ID entity=[Entity|ID] values+=[DataType|EString]?)
	 */
	protected void sequence_KeyValueElement(ISerializationContext context, KeyValueElement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Model returns Model
	 *
	 * Constraint:
	 *     (dataTypes+=DataType* databases+=Database*)
	 */
	protected void sequence_Model(ISerializationContext context, Model semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Node returns GraphNode
	 *
	 * Constraint:
	 *     (name=ID entity=[Entity|ID] attributes+=GraphAttribute*)
	 */
	protected void sequence_Node(ISerializationContext context, GraphNode semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DataType returns PrimitiveDataType
	 *     PrimitiveDataType returns PrimitiveDataType
	 *
	 * Constraint:
	 *     name=EString
	 */
	protected void sequence_PrimitiveDataType(ISerializationContext context, PrimitiveDataType semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, TyphonmlPackage.Literals.NAMED_ELEMENT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TyphonmlPackage.Literals.NAMED_ELEMENT__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPrimitiveDataTypeAccess().getNameEStringParserRuleCall_2_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Relation returns Relation
	 *
	 * Constraint:
	 *     (name=EString isContainment?=':'? type=[Entity|EString] opposite=[Relation|EString]? cardinality=Cardinality?)
	 */
	protected void sequence_Relation(ISerializationContext context, Relation semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Database returns RelationalDB
	 *     RelationalDB returns RelationalDB
	 *
	 * Constraint:
	 *     (name=ID tables+=Table*)
	 */
	protected void sequence_RelationalDB(ISerializationContext context, RelationalDB semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Table returns Table
	 *
	 * Constraint:
	 *     (name=ID entity=[Entity|ID] indexSpec=IndexSpec? idSpec=IdSpec?)
	 */
	protected void sequence_Table(ISerializationContext context, Table semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
