/**
 */
package typhonml.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import typhonml.util.TyphonmlAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class TyphonmlItemProviderAdapterFactory extends TyphonmlAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public TyphonmlItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link typhonml.Model} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ModelItemProvider modelItemProvider;

	/**
	 * This creates an adapter for a {@link typhonml.Model}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createModelAdapter() {
		if (modelItemProvider == null) {
			modelItemProvider = new ModelItemProvider(this);
		}

		return modelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link typhonml.PrimitiveDataType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PrimitiveDataTypeItemProvider primitiveDataTypeItemProvider;

	/**
	 * This creates an adapter for a {@link typhonml.PrimitiveDataType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPrimitiveDataTypeAdapter() {
		if (primitiveDataTypeItemProvider == null) {
			primitiveDataTypeItemProvider = new PrimitiveDataTypeItemProvider(this);
		}

		return primitiveDataTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link typhonml.CustomDataType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CustomDataTypeItemProvider customDataTypeItemProvider;

	/**
	 * This creates an adapter for a {@link typhonml.CustomDataType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCustomDataTypeAdapter() {
		if (customDataTypeItemProvider == null) {
			customDataTypeItemProvider = new CustomDataTypeItemProvider(this);
		}

		return customDataTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link typhonml.DataTypeItem} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DataTypeItemItemProvider dataTypeItemItemProvider;

	/**
	 * This creates an adapter for a {@link typhonml.DataTypeItem}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDataTypeItemAdapter() {
		if (dataTypeItemItemProvider == null) {
			dataTypeItemItemProvider = new DataTypeItemItemProvider(this);
		}

		return dataTypeItemItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link typhonml.Entity} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EntityItemProvider entityItemProvider;

	/**
	 * This creates an adapter for a {@link typhonml.Entity}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEntityAdapter() {
		if (entityItemProvider == null) {
			entityItemProvider = new EntityItemProvider(this);
		}

		return entityItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link typhonml.Attribute} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AttributeItemProvider attributeItemProvider;

	/**
	 * This creates an adapter for a {@link typhonml.Attribute}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAttributeAdapter() {
		if (attributeItemProvider == null) {
			attributeItemProvider = new AttributeItemProvider(this);
		}

		return attributeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link typhonml.Relation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RelationItemProvider relationItemProvider;

	/**
	 * This creates an adapter for a {@link typhonml.Relation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRelationAdapter() {
		if (relationItemProvider == null) {
			relationItemProvider = new RelationItemProvider(this);
		}

		return relationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link typhonml.RelationalDB} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RelationalDBItemProvider relationalDBItemProvider;

	/**
	 * This creates an adapter for a {@link typhonml.RelationalDB}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRelationalDBAdapter() {
		if (relationalDBItemProvider == null) {
			relationalDBItemProvider = new RelationalDBItemProvider(this);
		}

		return relationalDBItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link typhonml.Table} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TableItemProvider tableItemProvider;

	/**
	 * This creates an adapter for a {@link typhonml.Table}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTableAdapter() {
		if (tableItemProvider == null) {
			tableItemProvider = new TableItemProvider(this);
		}

		return tableItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link typhonml.IndexSpec} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IndexSpecItemProvider indexSpecItemProvider;

	/**
	 * This creates an adapter for a {@link typhonml.IndexSpec}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIndexSpecAdapter() {
		if (indexSpecItemProvider == null) {
			indexSpecItemProvider = new IndexSpecItemProvider(this);
		}

		return indexSpecItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link typhonml.IdSpec} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IdSpecItemProvider idSpecItemProvider;

	/**
	 * This creates an adapter for a {@link typhonml.IdSpec}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIdSpecAdapter() {
		if (idSpecItemProvider == null) {
			idSpecItemProvider = new IdSpecItemProvider(this);
		}

		return idSpecItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link typhonml.DocumentDB} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DocumentDBItemProvider documentDBItemProvider;

	/**
	 * This creates an adapter for a {@link typhonml.DocumentDB}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDocumentDBAdapter() {
		if (documentDBItemProvider == null) {
			documentDBItemProvider = new DocumentDBItemProvider(this);
		}

		return documentDBItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link typhonml.Collection} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CollectionItemProvider collectionItemProvider;

	/**
	 * This creates an adapter for a {@link typhonml.Collection}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCollectionAdapter() {
		if (collectionItemProvider == null) {
			collectionItemProvider = new CollectionItemProvider(this);
		}

		return collectionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link typhonml.KeyValueDB} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected KeyValueDBItemProvider keyValueDBItemProvider;

	/**
	 * This creates an adapter for a {@link typhonml.KeyValueDB}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createKeyValueDBAdapter() {
		if (keyValueDBItemProvider == null) {
			keyValueDBItemProvider = new KeyValueDBItemProvider(this);
		}

		return keyValueDBItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link typhonml.KeyValueElement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected KeyValueElementItemProvider keyValueElementItemProvider;

	/**
	 * This creates an adapter for a {@link typhonml.KeyValueElement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createKeyValueElementAdapter() {
		if (keyValueElementItemProvider == null) {
			keyValueElementItemProvider = new KeyValueElementItemProvider(this);
		}

		return keyValueElementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link typhonml.GraphDB} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GraphDBItemProvider graphDBItemProvider;

	/**
	 * This creates an adapter for a {@link typhonml.GraphDB}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGraphDBAdapter() {
		if (graphDBItemProvider == null) {
			graphDBItemProvider = new GraphDBItemProvider(this);
		}

		return graphDBItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link typhonml.GraphNode} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GraphNodeItemProvider graphNodeItemProvider;

	/**
	 * This creates an adapter for a {@link typhonml.GraphNode}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGraphNodeAdapter() {
		if (graphNodeItemProvider == null) {
			graphNodeItemProvider = new GraphNodeItemProvider(this);
		}

		return graphNodeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link typhonml.GraphAttribute} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GraphAttributeItemProvider graphAttributeItemProvider;

	/**
	 * This creates an adapter for a {@link typhonml.GraphAttribute}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGraphAttributeAdapter() {
		if (graphAttributeItemProvider == null) {
			graphAttributeItemProvider = new GraphAttributeItemProvider(this);
		}

		return graphAttributeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link typhonml.GraphEdge} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GraphEdgeItemProvider graphEdgeItemProvider;

	/**
	 * This creates an adapter for a {@link typhonml.GraphEdge}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGraphEdgeAdapter() {
		if (graphEdgeItemProvider == null) {
			graphEdgeItemProvider = new GraphEdgeItemProvider(this);
		}

		return graphEdgeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link typhonml.GraphEdgeLabel} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GraphEdgeLabelItemProvider graphEdgeLabelItemProvider;

	/**
	 * This creates an adapter for a {@link typhonml.GraphEdgeLabel}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGraphEdgeLabelAdapter() {
		if (graphEdgeLabelItemProvider == null) {
			graphEdgeLabelItemProvider = new GraphEdgeLabelItemProvider(this);
		}

		return graphEdgeLabelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link typhonml.ColumnDB} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ColumnDBItemProvider columnDBItemProvider;

	/**
	 * This creates an adapter for a {@link typhonml.ColumnDB}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createColumnDBAdapter() {
		if (columnDBItemProvider == null) {
			columnDBItemProvider = new ColumnDBItemProvider(this);
		}

		return columnDBItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link typhonml.Column} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ColumnItemProvider columnItemProvider;

	/**
	 * This creates an adapter for a {@link typhonml.Column}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createColumnAdapter() {
		if (columnItemProvider == null) {
			columnItemProvider = new ColumnItemProvider(this);
		}

		return columnItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link typhonml.GenericList} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GenericListItemProvider genericListItemProvider;

	/**
	 * This creates an adapter for a {@link typhonml.GenericList}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGenericListAdapter() {
		if (genericListItemProvider == null) {
			genericListItemProvider = new GenericListItemProvider(this);
		}

		return genericListItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (modelItemProvider != null) modelItemProvider.dispose();
		if (primitiveDataTypeItemProvider != null) primitiveDataTypeItemProvider.dispose();
		if (customDataTypeItemProvider != null) customDataTypeItemProvider.dispose();
		if (dataTypeItemItemProvider != null) dataTypeItemItemProvider.dispose();
		if (entityItemProvider != null) entityItemProvider.dispose();
		if (attributeItemProvider != null) attributeItemProvider.dispose();
		if (relationItemProvider != null) relationItemProvider.dispose();
		if (relationalDBItemProvider != null) relationalDBItemProvider.dispose();
		if (tableItemProvider != null) tableItemProvider.dispose();
		if (indexSpecItemProvider != null) indexSpecItemProvider.dispose();
		if (idSpecItemProvider != null) idSpecItemProvider.dispose();
		if (documentDBItemProvider != null) documentDBItemProvider.dispose();
		if (collectionItemProvider != null) collectionItemProvider.dispose();
		if (keyValueDBItemProvider != null) keyValueDBItemProvider.dispose();
		if (keyValueElementItemProvider != null) keyValueElementItemProvider.dispose();
		if (graphDBItemProvider != null) graphDBItemProvider.dispose();
		if (graphNodeItemProvider != null) graphNodeItemProvider.dispose();
		if (graphAttributeItemProvider != null) graphAttributeItemProvider.dispose();
		if (graphEdgeItemProvider != null) graphEdgeItemProvider.dispose();
		if (graphEdgeLabelItemProvider != null) graphEdgeLabelItemProvider.dispose();
		if (columnDBItemProvider != null) columnDBItemProvider.dispose();
		if (columnItemProvider != null) columnItemProvider.dispose();
		if (genericListItemProvider != null) genericListItemProvider.dispose();
	}

}
